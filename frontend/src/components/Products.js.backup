import React, { useEffect, useState, useCallback } from 'react';
import axios from 'axios';
import Barcode from 'react-barcode';
import html2canvas from 'html2canvas';

function Products() {
  const [view, setView] = useState('products'); // 'products' or 'sold'
  const [products, setProducts] = useState([]);
  const [form, setForm] = useState({ id: '', name: '', brand: '', design_no: '', location: '', uom: '', retail_price: '', wholesale_price: '', stock_quantity: '', supplier: '' });
  const [suppliers, setSuppliers] = useState([]);
  
  // Additional state for form and error handling
  const [editing, setEditing] = useState(null);
  const [error, setError] = useState(null);
  const [message, setMessage] = useState(null);
  
  // Product filters
  const [search, setSearch] = useState("");
  const [supplierSearch, setSupplierSearch] = useState("");
  const [supplierDropdownOpen, setSupplierDropdownOpen] = useState(false);
  const [supplierFilter, setSupplierFilter] = useState("");
  const [sortField, setSortField] = useState("id");
  const [sortOrder, setSortOrder] = useState("desc");
  
  // Sold products state and filters
  const [sales, setSales] = useState([]);
  const [soldFilters, setSoldFilters] = useState({
    product_name: '',
    brand: '',
    customer_name: '',
    customer_brand: '',
    sale_type: '',
    start_date: '',
    end_date: '',
    status: ''
  });
  const [salesLoading, setSalesLoading] = useState(false);
  
  const [barcodeProduct, setBarcodeProduct] = useState(null);
  const [barcodeCount, setBarcodeCount] = useState(1);
  const [showAddForm, setShowAddForm] = useState(false);
  const [filteredSuppliers, setFilteredSuppliers] = useState([]);
  const [filteredProducts, setFilteredProducts] = useState([]);
  
  // Token for API requests
  const token = localStorage.getItem('token');

  // Fetch suppliers for dropdown
  const fetchSuppliers = useCallback(async () => {
    try {
      const res = await axios.get('http://localhost:5000/suppliers', { headers: { Authorization: `Bearer ${token}` } });
      setSuppliers(res.data);
    } catch {
      setError('Failed to fetch suppliers');
    }
  }, [token]);

  // Fetch products
  const fetchProducts = useCallback(async () => {
    try {
      const res = await axios.get('http://localhost:5000/products', { headers: { Authorization: `Bearer ${token}` } });
      setProducts(res.data);
    } catch {
      setError('Failed to fetch products');
    }
  }, [token]);

  // Fetch sales for sold products view
  const fetchSales = useCallback(async () => {
    setSalesLoading(true);
    try {
      // Prepare params for backend (excluding status since backend might not support it yet)
      const backendParams = Object.fromEntries(
        Object.entries(soldFilters)
          .filter(([key, value]) => value && !['status', 'sale_type', 'customer_name'].includes(key))
      );
      
      console.log('Fetching sales with backend filters:', backendParams);
      
      const res = await axios.get('http://localhost:5000/sales', {
        params: backendParams,
        headers: { Authorization: `Bearer ${token}` }
      });
      
      console.log('Products - Sales API Response:', res.data);
      // Debug: Check if customer_brand_name exists in the data
      res.data.forEach((sale, index) => {
        if (sale.customer_brand_name) {
          console.log(`Products - Sale ${sale.id} has customer_brand_name:`, sale.customer_brand_name);
        }
      });
      
      // Apply client-side filtering for status and any other filters
      let filteredSales = res.data;
      
      // Filter by status if specified
      if (soldFilters.status) {
        filteredSales = filteredSales.filter(sale => sale.status === soldFilters.status);
        console.log(`Filtered ${res.data.length} sales to ${filteredSales.length} with status: ${soldFilters.status}`);
      }
      
      // Filter by brand if specified (backup client-side filtering)
      if (soldFilters.brand && filteredSales.length > 0) {
        filteredSales = filteredSales.filter(sale => 
          sale.items && sale.items.some(item => 
            item.brand && item.brand.toLowerCase().includes(soldFilters.brand.toLowerCase())
          )
        );
      }
      
      // Filter by customer name if specified
      if (soldFilters.customer_name && filteredSales.length > 0) {
        filteredSales = filteredSales.filter(sale => 
          sale.customer_name && sale.customer_name.toLowerCase().includes(soldFilters.customer_name.toLowerCase())
        );
      }
      
      // Filter by sale type if specified  
      if (soldFilters.sale_type && filteredSales.length > 0) {
        filteredSales = filteredSales.filter(sale => {
          const saleType = sale.customer_id ? 'wholesale' : 'retail';
          return saleType === soldFilters.sale_type;
        });
      }
      
      setSales(filteredSales);
    } catch (err) {
      console.error('Failed to fetch sales:', err);
      setError('Failed to fetch sales');
    }
    setSalesLoading(false);
  }, [soldFilters, token]);

  // Filter suppliers for dropdown search
  useEffect(() => {
    if (supplierSearch) {
      setFilteredSuppliers(suppliers.filter(sup => sup.name.toLowerCase().includes(supplierSearch.toLowerCase())));
    } else if (supplierDropdownOpen) {
      // Show all suppliers when dropdown is opened via button
      setFilteredSuppliers(suppliers);
    } else {
      setFilteredSuppliers([]);
    }
  }, [supplierSearch, suppliers, supplierDropdownOpen]);

  // Filter products for table
  useEffect(() => {
    let filtered = [...products];
    
    // Search filter
    if (search) {
      filtered = filtered.filter(prod =>
        (prod.name && prod.name.toLowerCase().includes(search.toLowerCase())) ||
        (prod.brand && prod.brand.toLowerCase().includes(search.toLowerCase())) ||
        (prod.id && prod.id.toString().includes(search)) ||
        (prod.design_no && prod.design_no.toLowerCase().includes(search.toLowerCase())) ||
        (prod.supplier && prod.supplier.toLowerCase().includes(search.toLowerCase()))
      );
    }
    
    // Supplier filter
    if (supplierFilter) {
      filtered = filtered.filter(prod => {
        const productSupplier = prod.supplier || '';
        return productSupplier === supplierFilter;
      });
    }
    
    // Sort products
    filtered.sort((a, b) => {
      const aValue = a[sortField] || '';
      const bValue = b[sortField] || '';
      
      if (sortOrder === "asc") {
        return aValue > bValue ? 1 : -1;
      } else {
        return aValue < bValue ? 1 : -1;
      }
    });
    
    setFilteredProducts(filtered);
  }, [products, search, supplierFilter, sortField, sortOrder]);

  // Initial fetch
  useEffect(() => {
    fetchSuppliers();
    fetchProducts();
  }, [fetchSuppliers, fetchProducts]);

  // Fetch sales when sold filters change or view changes to sold
  useEffect(() => {
    if (view === 'sold') {
      fetchSales();
    }
  }, [fetchSales, view]);

  // Handle form input change
  function handleChange(e) {
    setForm({ ...form, [e.target.name]: e.target.value });
    if (e.target.name === "supplier") {
      setSupplierSearch(e.target.value);
    }
  }

  // Handle sold products filter change
  function handleSoldFilterChange(e) {
    setSoldFilters({ ...soldFilters, [e.target.name]: e.target.value });
  }

  // Handle form submit (add or update product)
  async function handleSubmit(e) {
    e.preventDefault();
    try {
      if (editing) {
        await axios.put(`http://localhost:5000/products/${form.id}`, form, { headers: { Authorization: `Bearer ${token}` } });
        setMessage('✅ Product updated successfully!');
      } else {
        await axios.post('http://localhost:5000/products', form, { headers: { Authorization: `Bearer ${token}` } });
        setMessage('✅ Product added successfully!');
      }
      setForm({ id: '', name: '', brand: '', design_no: '', location: '', uom: '', retail_price: '', wholesale_price: '', stock_quantity: '', supplier: '' });
      setEditing(null);
      setShowAddForm(false); // Close the form after successful submission
      setSupplierSearch('');
      setSupplierDropdownOpen(false);
      fetchProducts();
      setTimeout(() => setMessage(null), 3000);
    } catch (err) {
      setError(err.response?.data?.message || 'Failed to save product');
      setTimeout(() => setError(null), 3000);
    }
  }

  // Handle edit
  function handleEdit(product) {
    console.log('Editing product:', product);
    setForm({
      id: product.id || '',
      name: product.name || '',
      brand: product.brand || '',
      design_no: product.design_no || '',
      location: product.location || '',
      uom: product.uom || '',
      retail_price: product.retail_price || '',
      wholesale_price: product.wholesale_price || '',
      stock_quantity: product.stock_quantity || '',
      supplier: product.supplier || ''
    });
    setSupplierSearch(product.supplier || '');
    setEditing(product.id);
    setShowAddForm(true); // Show form when editing
    setError(null);
    setMessage(null);
  }

  // Handle delete
  async function handleDelete(id) {
    if (window.confirm('Are you sure you want to delete this product?')) {
      try {
        await axios.delete(`http://localhost:5000/products/${id}`, { headers: { Authorization: `Bearer ${token}` } });
        setMessage('✅ Product deleted successfully!');
        fetchProducts();
        setTimeout(() => setMessage(null), 3000);
      } catch (err) {
        setError('Failed to delete product');
        setTimeout(() => setError(null), 3000);
      }
    }
  }

  // Handle barcode generation
  function handleShowBarcode(product) {
    setBarcodeProduct(product);
  }

  function handlePrintBarcode() {
    const printWindow = window.open('', '_blank');
    const barcodeDiv = document.getElementById('barcode-to-print');
    if (barcodeDiv && printWindow) {
      printWindow.document.write(`
        <html>
          <head>
            <title>Barcode - ${barcodeProduct.name}</title>
            <style>
              body { display: flex; flex-direction: column; align-items: center; margin: 20px; }
              .barcode-container { text-align: center; margin: 10px; page-break-after: always; }
            </style>
          </head>
          <body>
            ${Array(barcodeCount).fill().map(() => `
              <div class="barcode-container">
                ${barcodeDiv.innerHTML}
              </div>
            `).join('')}
          </body>
        </html>
      `);
      printWindow.document.close();
      printWindow.print();
    }
  }

  return (
    <>
      <div className="page-container">
        {/* Enhanced Professional Header */}
        <div className="page-header">
          <h1 className="page-title professional-header">
            <span className="icon">📦</span>
            Product Management
          </h1>
          <p className="page-subtitle professional-subtitle">
            Manage your inventory, track stock levels, and generate professional barcodes
          </p>
          <div className="header-stats">
            <div className="stat-item">
              <span className="stat-number">{products.length}</span>
              <span className="stat-label">Total Products</span>
            </div>
            <div className="stat-item">
              <span className="stat-number">
                {products.filter(p => (p.stock_quantity || 0) > 0).length}
              </span>
              <span className="stat-label">In Stock</span>
            </div>
            <div className="stat-item">
              <span className="stat-number">
                {products.filter(p => (p.stock_quantity || 0) <= 5).length}
              </span>
              <span className="stat-label">Low Stock</span>
            </div>
          </div>
        </div>

        {/* Messages */}
        {message && (
          <div className="alert alert-success">
            <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
              <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd"/>
            </svg>
            <span className="flex-1">{message}</span>
            <button 
              onClick={() => setMessage(null)}
              className="ml-2 text-gray-400 hover:text-gray-600 transition-colors"
              aria-label="Dismiss"
            >
              ✕
            </button>
          </div>
        )}
        
        {error && (
          <div className="alert alert-error">
            <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
              <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd"/>
            </svg>
            <span className="flex-1">{error}</span>
            <button 
              onClick={() => setError(null)}
              className="ml-2 text-gray-400 hover:text-gray-600 transition-colors"
              aria-label="Dismiss"
            >
              ✕
            </button>
          </div>
        )}

        {/* Unified Search and Filter Section */}
        <div className="card mb-6">
          <div className="card-header">
            <h3 className="card-title">
              Search & Filter
            </h3>
          </div>
          <div className="card-body">
            <div className="grid grid-cols-4 gap-6">
              {/* Product Search Filters */}
              {view === 'products' ? (
                <>
                  <div className="col-span-1">
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Search Products
                    </label>
                    <div className="relative">
                      <input
                        type="text"
                        placeholder="Search by name, brand, or ID..."
                        value={search}
                        onChange={e => setSearch(e.target.value)}
                        className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-base"
                      />
                      {search && (
                        <button 
                          onClick={() => setSearch('')}
                          className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600"
                        >
                          ✖
                        </button>
                      )}
                    </div>
                  </div>
                  
                  <div className="col-span-1">
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Filter by Supplier
                    </label>
                    <select 
                      value={supplierFilter} 
                      onChange={e => setSupplierFilter(e.target.value)} 
                      className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-base"
                    >
                      <option value="">All Suppliers</option>
                      {suppliers.map(sup => (
                        <option key={sup.name || sup.id || Math.random()} value={sup.name || ''}>
                          {sup.name || 'Unnamed Supplier'}
                        </option>
                      ))}
                    </select>
                  </div>
                  
                  <div className="col-span-1">
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Sort by
                    </label>
                    <select 
                      value={sortField} 
                      onChange={e => setSortField(e.target.value)} 
                      className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-base"
                    >
                      <option value="id">ID (Recent First)</option>
                      <option value="name">Name</option>
                      <option value="retail_price">Retail Price</option>
                      <option value="wholesale_price">Wholesale Price</option>
                      <option value="stock_quantity">Stock Quantity</option>
                    </select>
                  </div>
                  
                  <div className="col-span-1">
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Sort Order
                    </label>
                    <div className="flex gap-2">
                      <button 
                        className={`flex-1 px-4 py-3 text-sm font-medium rounded-lg border ${
                          sortOrder === 'desc' 
                            ? 'bg-blue-600 text-white border-blue-600' 
                            : 'bg-white text-gray-700 border-gray-300 hover:bg-gray-50'
                        }`}
                        onClick={() => setSortOrder('desc')}
                      >
                        Desc
                      </button>
                      <button 
                        className={`flex-1 px-4 py-3 text-sm font-medium rounded-lg border ${
                          sortOrder === 'asc' 
                            ? 'bg-blue-600 text-white border-blue-600' 
                            : 'bg-white text-gray-700 border-gray-300 hover:bg-gray-50'
                        }`}
                        onClick={() => setSortOrder('asc')}
                      >
                        Asc
                      </button>
                    </div>
                  </div>
                </>
              ) : (
                /* Sales/Sold Products Filters */
                <>
                  <div className="col-span-1">
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Product Name
                    </label>
                    <input
                      name="product_name"
                      placeholder="Search by product name..."
                      value={soldFilters.product_name}
                      onChange={handleSoldFilterChange}
                      className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-base"
                    />
                  </div>
                  
                  <div className="col-span-1">
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Customer Name
                    </label>
                    <input
                      name="customer_name"
                      placeholder="Search by customer name..."
                      value={soldFilters.customer_name}
                      onChange={handleSoldFilterChange}
                      className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-base"
                    />
                  </div>
                  
                  <div className="col-span-1">
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Sale Type
                    </label>
                    <select
                      name="sale_type"
                      value={soldFilters.sale_type}
                      onChange={handleSoldFilterChange}
                      className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-base"
                    >
                      <option value="">All Types</option>
                      <option value="retail">Retail</option>
                      <option value="wholesale">Wholesale</option>
                    </select>
                  </div>
                  
                  <div className="col-span-1">
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Date Range
                    </label>
                    <input
                      name="start_date"
                      type="date"
                      value={soldFilters.start_date}
                      onChange={handleSoldFilterChange}
                      className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-base"
                      placeholder="Start date"
                    />
                  </div>
                  
                  <div className="professional-search-group">
                    <label className="professional-label">
                      <span className="label-icon">�</span>
                      Customer Brand
                    </label>
                    <div className="input-wrapper">
                      <input
                        name="customer_brand"
                        placeholder="Search by customer brand..."
                        value={soldFilters.customer_brand || ''}
                        onChange={handleSoldFilterChange}
                        className="professional-input"
                      />
                      <div className="input-focus-border"></div>
                    </div>
                  </div>
                  
                  <div className="professional-search-group">
                    <label className="professional-label">
                      <span className="label-icon">�🏪</span>
                      Sale Type
                    </label>
                    <div className="input-wrapper">
                      <select
                        name="sale_type"
                        value={soldFilters.sale_type}
                        onChange={handleSoldFilterChange}
                        className="professional-select"
                      >
                        <option value="">All Types</option>
                        <option value="retail">Retail</option>
                        <option value="wholesale">Wholesale</option>
                      </select>
                      <div className="select-arrow">▼</div>
                    </div>
                  </div>
                  
                  <div className="professional-search-group">
                    <label className="professional-label">
                      <span className="label-icon">�📅</span>
                      Start Date
                    </label>
                    <div className="input-wrapper">
                      <input
                        name="start_date"
                        type="date"
                        value={soldFilters.start_date}
                        onChange={handleSoldFilterChange}
                        className="professional-input"
                      />
                      <div className="input-focus-border"></div>
                    </div>
                  </div>
                  
                  <div className="form-group">
                    <label className="form-label">
                      <span className="mr-2">📅</span>
                      End Date
                    </label>
                    <input
                      name="end_date"
                      type="date"
                      value={soldFilters.end_date}
                      onChange={handleSoldFilterChange}
                      className="form-input"
                    />
                  </div>
                  
                  <div className="form-group">
                    <label className="form-label">
                      <span className="mr-2">📊</span>
                      Status
                    </label>
                    <select
                      name="status"
                      value={soldFilters.status}
                      onChange={handleSoldFilterChange}
                      className="form-input"
                    >
                      <option value="">All Status</option>
                      <option value="pending">Pending</option>
                      <option value="completed">Completed</option>
                    </select>
                  </div>
                </>
              )}
            </div>
            
            <div className="mt-4 text-sm text-gray-600 bg-gray-50 p-3 rounded-lg border">
              {view === 'products' ? (
                <>Showing <strong>{filteredProducts.length}</strong> of <strong>{products.length}</strong> products</>
              ) : (
                <>Showing <strong>{sales.length}</strong> sales records</>
              )}
            </div>
          </div>
        </div>

        {/* Enhanced Navigation Tabs */}
        <div className="card professional-nav-card">
          <div className="card-body">
            <div className="professional-nav-tabs">
              <button 
                onClick={() => setView('products')} 
                className={`nav-tab transition-colors ${view === 'products' 
                  ? 'bg-blue-600 text-white border-blue-600' 
                  : 'bg-white text-gray-700 border-gray-300 hover:bg-blue-50'
                }`}
                style={{
                  backgroundColor: view === 'products' ? '#2563eb' : '#ffffff',
                  color: view === 'products' ? '#ffffff' : '#374151',
                  borderColor: view === 'products' ? '#2563eb' : '#d1d5db'
                }}
              >
                <span className="nav-icon">📦</span>
                <span className="nav-text">Product List</span>
                <span 
                  className="nav-badge"
                  style={{
                    backgroundColor: view === 'products' ? '#1d4ed8' : '#e5e7eb',
                    color: view === 'products' ? '#ffffff' : '#6b7280'
                  }}
                >
                  {products.length}
                </span>
              </button>
              <button 
                onClick={() => setView('sold')} 
                className={`nav-tab transition-colors ${view === 'sold' 
                  ? 'bg-blue-600 text-white border-blue-600' 
                  : 'bg-white text-gray-700 border-gray-300 hover:bg-blue-50'
                }`}
                style={{
                  backgroundColor: view === 'sold' ? '#2563eb' : '#ffffff',
                  color: view === 'sold' ? '#ffffff' : '#374151',
                  borderColor: view === 'sold' ? '#2563eb' : '#d1d5db'
                }}
              >
                <span className="nav-icon">📊</span>
                <span className="nav-text">Sold Products</span>
                <span 
                  className="nav-badge"
                  style={{
                    backgroundColor: view === 'sold' ? '#1d4ed8' : '#e5e7eb',
                    color: view === 'sold' ? '#ffffff' : '#6b7280'
                  }}
                >
                  {sales.length}
                </span>
              </button>
            </div>
          </div>
        </div>

        {/* Content sections for both views */}
        {view === 'products' ? (
          <div>
            {/* Product Form Dropdown */}
            <div className="card mb-8">
              <div className="card-header">
                <div className="flex items-center justify-between">
                  <div>
                    <h2 className="card-title">
                      {editing ? '✏️ Edit Product' : '📦 Product Management'}
                    </h2>
                    <p className="card-subtitle">
                      {editing ? 'Update product information and inventory details' : 'Manage your product inventory and information'}
                    </p>
                  </div>
                  {!editing && (
                    <button
                      type="button"
                      onClick={() => setShowAddForm(!showAddForm)}
                      className={`btn ${showAddForm ? 'btn-secondary' : 'btn-primary'} flex items-center gap-2`}
                    >
                      {showAddForm ? (
                        <>
                          ✖️ <span>Cancel</span>
                        </>
                      ) : (
                        <>
                          ➕ <span>Add New Product</span>
                        </>
                      )}
                    </button>
                  )}
                </div>
              </div>
              
              {/* Collapsible Form */}
              {(showAddForm || editing) && (
                <div className="card-body border-t border-gray-200">
                <form onSubmit={handleSubmit} className="professional-form">
                  <div className="professional-form-grid">
                    <div className="professional-input-group">
                      <label className="professional-label">
                        <span className="label-icon">📝</span>
                        Product Name *
                      </label>
                      <div className="input-wrapper">
                        <input 
                          name="name" 
                          placeholder="Enter product name" 
                          value={form.name} 
                          onChange={handleChange} 
                          required 
                          className="professional-input"
                        />
                        <div className="input-focus-border"></div>
                      </div>
                    </div>
                    
                    <div className="professional-input-group">
                      <label className="professional-label">
                        <span className="label-icon">📏</span>
                        Unit of Measure *
                      </label>
                      <div className="input-wrapper">
                        <input 
                          name="uom" 
                          placeholder="e.g., pieces, kg, liters" 
                          value={form.uom} 
                          onChange={handleChange} 
                          required 
                          className="professional-input"
                        />
                        <div className="input-focus-border"></div>
                      </div>
                    </div>
                    
                    <div className="professional-input-group">
                      <label className="professional-label">
                        <span className="label-icon">🏷️</span>
                        Brand
                      </label>
                      <div className="input-wrapper">
                        <input 
                          name="brand" 
                          placeholder="Product brand" 
                          value={form.brand} 
                          onChange={handleChange} 
                          className="professional-input"
                        />
                        <div className="input-focus-border"></div>
                      </div>
                    </div>
                    
                    <div className="professional-input-group">
                      <label className="professional-label">
                        <span className="label-icon">🎨</span>
                        Design Number
                      </label>
                      <div className="input-wrapper">
                        <input 
                          name="design_no" 
                          placeholder="Model/Design number" 
                          value={form.design_no} 
                          onChange={handleChange} 
                          className="professional-input"
                        />
                        <div className="input-focus-border"></div>
                      </div>
                    </div>
                    
                    <div className="professional-input-group">
                      <label className="professional-label">
                        <span className="label-icon">📍</span>
                        Storage Location
                      </label>
                      <div className="input-wrapper">
                        <input 
                          name="location" 
                          placeholder="Warehouse location" 
                          value={form.location} 
                          onChange={handleChange} 
                          className="professional-input"
                        />
                        <div className="input-focus-border"></div>
                      </div>
                    </div>
                    
                    <div className="professional-input-group">
                      <label className="professional-label">
                        <span className="label-icon">💰</span>
                        Retail Price *
                      </label>
                      <div className="input-wrapper price-input">
                        <span className="currency-symbol">₹</span>
                        <input 
                          name="retail_price" 
                          placeholder="0.00" 
                          type="number" 
                          step="0.01"
                          value={form.retail_price} 
                          onChange={handleChange} 
                          required 
                          className="professional-input price-field"
                        />
                        <div className="input-focus-border"></div>
                      </div>
                    </div>
                    
                    <div className="professional-input-group">
                      <label className="professional-label">
                        <span className="label-icon">💵</span>
                        Wholesale Price
                      </label>
                      <div className="input-wrapper price-input">
                        <span className="currency-symbol">₹</span>
                        <input 
                          name="wholesale_price" 
                          placeholder="0.00" 
                          type="number" 
                          step="0.01"
                          value={form.wholesale_price} 
                          onChange={handleChange} 
                          className="professional-input price-field"
                        />
                        <div className="input-focus-border"></div>
                      </div>
                    </div>
                    
                    <div className="professional-input-group">
                      <label className="professional-label">
                        <span className="label-icon">📦</span>
                        Stock Quantity *
                      </label>
                      <div className="input-wrapper">
                        <input 
                          name="stock_quantity" 
                          placeholder="0" 
                          type="number" 
                          min="0"
                          step="1"
                          value={form.stock_quantity} 
                          onChange={e => {
                            const value = e.target.value;
                            // Prevent negative values and allow only integers
                            if (value === '' || (Number(value) >= 0 && Number.isInteger(Number(value)))) {
                              setForm({ ...form, stock_quantity: value });
                            }
                          }}
                          required 
                          className="professional-input"
                        />
                        <div className="input-focus-border"></div>
                      </div>
                    </div>
                    
                    <div className="professional-input-group supplier-input-group">
                      <label className="professional-label">
                        <span className="label-icon">🏭</span>
                        Supplier
                      </label>
                      <div className="input-wrapper">
                        <div className="supplier-search-wrapper">
                          <span className="search-icon">🔍</span>
                          <input
                            name="supplier"
                            placeholder="Search suppliers..."
                            value={supplierSearch || form.supplier || ''}
                            onChange={e => { 
                              const value = e.target.value;
                              setSupplierSearch(value); 
                              setForm({ ...form, supplier: value });
                              setSupplierDropdownOpen(true); 
                            }}
                            autoComplete="off"
                            className="professional-input supplier-search"
                            onFocus={() => setSupplierDropdownOpen(true)}
                          />
                          <button 
                            type="button"
                            className="dropdown-toggle-btn"
                            onClick={() => setSupplierDropdownOpen(!supplierDropdownOpen)}
                            title="Toggle supplier dropdown"
                          >
                            <span className={`dropdown-arrow ${supplierDropdownOpen ? 'open' : ''}`}>▼</span>
                          </button>
                          <div className="input-focus-border"></div>
                        </div>
                        {supplierDropdownOpen && (filteredSuppliers.length > 0 || suppliers.length > 0) && (
                          <div className="professional-dropdown">
                            {filteredSuppliers.map(sup => (
                              <div
                                key={sup.name}
                                className="dropdown-option"
                                onClick={() => {
                                  setForm({ ...form, supplier: sup.name, brand: sup.brand_name });
                                  setSupplierSearch(sup.name);
                                  setSupplierDropdownOpen(false);
                                }}
                              >
                                <div className="supplier-option-name">{sup.name}</div>
                                {sup.brand_name && <div className="supplier-option-brand">{sup.brand_name}</div>}
                              </div>
                            ))}
                          </div>
                        )}
                      </div>
                    </div>
                  </div>
                  
                  <div className="professional-form-actions">
                    <button type="submit" className="btn-professional btn-professional-primary">
                      <span className="btn-icon">{editing ? '💾' : '➕'}</span>
                      <span className="btn-text">{editing ? 'Update Product' : 'Add Product'}</span>
                    </button>
                    <button 
                      type="button" 
                      className="btn-professional btn-professional-secondary"
                      onClick={() => { 
                        setEditing(null); 
                        setShowAddForm(false);
                        setForm({ id: '', name: '', brand: '', design_no: '', location: '', uom: '', retail_price: '', wholesale_price: '', stock_quantity: '', supplier: '' }); 
                        setSupplierSearch(''); 
                        setSupplierDropdownOpen(false);
                        setError(null);
                        setMessage(null);
                      }}
                    >
                      <span className="btn-icon">✖️</span>
                      <span className="btn-text">Cancel</span>
                    </button>
                  </div>
                  </form>
                </div>
              )}
            </div>

            {/* Products Table */}
            <div className="table-container">
              <table className="table">
                <thead>
                  <tr>
                    <th>🔢 ID</th>
                    <th>📦 Product</th>
                    <th>🏷️ Brand & Design</th>
                    <th>🏭 Supplier</th>
                    <th>📍 Location</th>
                    <th>💰 Pricing</th>
                    <th>📊 Stock</th>
                    <th>📈 Sales</th>
                    <th>⚡ Actions</th>
                  </tr>
                </thead>
                <tbody>
                  {filteredProducts.length === 0 ? (
                    <tr>
                      <td colSpan="9" className="text-center py-8 text-gray-500">
                        {search || supplierFilter ? 'No products found matching your criteria.' : 'No products added yet.'}
                      </td>
                    </tr>
                  ) : (
                    filteredProducts.map(prod => (
                      <tr key={prod.id}>
                        <td>
                          <div className="font-mono text-sm">{prod.id}</div>
                        </td>
                        <td>
                          <div>
                            <div className="font-semibold text-gray-900">{prod.name}</div>
                            <div className="text-sm text-gray-500">{prod.uom}</div>
                          </div>
                        </td>
                        <td>
                          <div>
                            <div className="text-sm">{prod.brand || 'No brand'}</div>
                            <div className="text-sm text-gray-500">{prod.design_no || 'No design'}</div>
                          </div>
                        </td>
                        <td>
                          <div className="text-sm font-medium text-blue-600">
                            {prod.supplier || 'No supplier'}
                          </div>
                        </td>
                        <td>
                          <div className="text-sm">{prod.location || 'Not specified'}</div>
                        </td>
                        <td>
                          <div>
                            <div className="font-semibold text-success">${parseFloat(prod.retail_price || 0).toFixed(2)}</div>
                            <div className="text-sm text-gray-500">${parseFloat(prod.wholesale_price || 0).toFixed(2)} wholesale</div>
                          </div>
                        </td>
                        <td>
                          <div className={`text-center px-2 py-1 rounded ${
                            prod.stock_quantity <= 5 ? 'bg-red-100 text-red-800' : 
                            prod.stock_quantity <= 20 ? 'bg-yellow-100 text-yellow-800' : 
                            'bg-green-100 text-green-800'
                          }`}>
                            {prod.stock_quantity || 0}
                          </div>
                        </td>
                        <td>
                          <div className="text-center font-semibold">{prod.total_sold || 0}</div>
                        </td>
                        <td>
                          <div className="flex gap-1">
                            <button 
                              onClick={() => handleEdit(prod)}
                              className="btn btn-sm btn-secondary"
                              title="Edit product"
                            >
                              ✏️
                            </button>
                            <button 
                              onClick={() => handleDelete(prod.id)}
                              className="btn btn-sm btn-danger"
                              title="Delete product"
                            >
                              🗑️
                            </button>
                            <button 
                              onClick={() => handleShowBarcode(prod)}
                              className="btn btn-sm btn-outline"
                              title="Generate barcode"
                            >
                              📊
                            </button>
                          </div>
                        </td>
                      </tr>
                    ))
                  )}
                </tbody>
              </table>
            </div>

            {/* Barcode Modal */}
            {barcodeProduct && (
              <div className="modal-overlay">
                <div className="modal-content">
                  <div className="modal-header">
                    <h3 className="modal-title">📊 Barcode for {barcodeProduct.name}</h3>
                  </div>
                  <div className="modal-body">
                    <div id="barcode-to-print" className="flex items-center justify-center p-4 border-2 border-dashed border-gray-300 rounded-lg mb-4">
                      <Barcode value={barcodeProduct.id} width={2} height={60} fontSize={16} />
                    </div>
                    <div className="form-group">
                      <label className="form-label">Print Count</label>
                      <input 
                        type="number" 
                        min={1} 
                        value={barcodeCount} 
                        onChange={e => setBarcodeCount(Number(e.target.value))} 
                        className="form-input w-20"
                      />
                    </div>
                  </div>
                  <div className="modal-footer">
                    <button className="btn btn-primary" onClick={handlePrintBarcode}>
                      🖨️ Print
                    </button>
                    <button 
                      className="btn btn-secondary" 
                      onClick={async () => {
                        const barcodeDiv = document.getElementById('barcode-to-print');
                        if (!barcodeDiv) return;
                        const canvas = await html2canvas(barcodeDiv, { width: 192, height: 96, scale: 2 });
                        const link = document.createElement('a');
                        link.download = `${barcodeProduct.id}-barcode.png`;
                        link.href = canvas.toDataURL('image/png');
                        link.click();
                      }}
                    >
                      💾 Save PNG
                    </button>
                    <button className="btn btn-outline" onClick={() => setBarcodeProduct(null)}>
                      ✖️ Close
                    </button>
                  </div>
                </div>
              </div>
            )}
          </div>
        ) : (
          /* Sold Products View */
          <div className="card">
            <div className="card-header">
              <h2 className="card-title">
                <span className="icon">📊</span>
                Sold Products & Sales History
              </h2>
            </div>
            <div className="card-body">
              {/* Sales Summary Cards */}
              {sales.length > 0 && (
                <div className="grid grid-cols-4 gap-4 mb-6">
                  <div className="bg-gradient-to-r from-blue-50 to-blue-100 p-4 rounded-lg border border-blue-200">
                    <div className="text-sm font-medium text-blue-600">Total Sales</div>
                    <div className="text-2xl font-bold text-blue-900">
                      ₹{sales.reduce((sum, sale) => sum + parseFloat(sale.total_amount || 0), 0).toFixed(2)}
                    </div>
                  </div>
                  <div className="bg-gradient-to-r from-orange-50 to-orange-100 p-4 rounded-lg border border-orange-200">
                    <div className="text-sm font-medium text-orange-600">Total Discounts</div>
                    <div className="text-2xl font-bold text-orange-900">
                      ₹{sales.reduce((sum, sale) => sum + parseFloat(sale.discount || 0), 0).toFixed(2)}
                    </div>
                  </div>
                  <div className="bg-gradient-to-r from-green-50 to-green-100 p-4 rounded-lg border border-green-200">
                    <div className="text-sm font-medium text-green-600">Net Revenue</div>
                    <div className="text-2xl font-bold text-green-900">
                      ₹{(sales.reduce((sum, sale) => sum + parseFloat(sale.total_amount || 0), 0) - sales.reduce((sum, sale) => sum + parseFloat(sale.discount || 0), 0)).toFixed(2)}
                    </div>
                  </div>
                  <div className="bg-gradient-to-r from-purple-50 to-purple-100 p-4 rounded-lg border border-purple-200">
                    <div className="text-sm font-medium text-purple-600">Total Items Sold</div>
                    <div className="text-2xl font-bold text-purple-900">
                      {sales.reduce((sum, sale) => sum + (sale.items ? sale.items.reduce((itemSum, item) => itemSum + parseInt(item.quantity || 0), 0) : 0), 0)}
                    </div>
                  </div>
                </div>
              )}
              
              {salesLoading ? (
                <div className="text-center py-8">
                  <div className="loading-spinner"></div>
                  <p>Loading sales data...</p>
                </div>
              ) : (
                <div className="table-container">
                  <table className="table">
                    <thead>
                      <tr>
                        <th>� Bill #</th>
                        <th>�🔢 Sale ID</th>
                        <th>📅 Date</th>
                        <th>� Customer</th>
                        <th>� Brand Name</th>
                        <th>�🏪 Sale Type</th>
                        <th>�📊 Status</th>
                        <th>💰 Total Amount</th>
                        <th>🎯 Discount</th>
                        <th>📦 Items Sold</th>
                      </tr>
                    </thead>
                    <tbody>
                      {sales.length === 0 ? (
                        <tr>
                          <td colSpan="10" className="text-center py-8 text-gray-500">
                            No sales records found matching your criteria.
                          </td>
                        </tr>
                      ) : (
                        sales.map(sale => (
                          <tr key={sale.id}>
                            <td>
                              <div className="font-mono text-sm text-blue-600">
                                #{sale.id?.toString().padStart(6, '0') || 'N/A'}
                              </div>
                            </td>
                            <td>
                              <div className="font-mono text-sm">{sale.id}</div>
                            </td>
                            <td>
                              <div className="text-sm">
                                {sale.date ? new Date(sale.date).toLocaleDateString('en-US', {
                                  year: 'numeric',
                                  month: 'short',
                                  day: 'numeric'
                                }) : 'N/A'}
                                <div className="text-xs text-gray-500">
                                  {sale.date ? new Date(sale.date).toLocaleTimeString('en-US', {
                                    hour: '2-digit',
                                    minute: '2-digit'
                                  }) : ''}
                                </div>
                              </div>
                            </td>
                            <td>
                              <div className="text-sm">
                                {sale.customer_name ? (
                                  <div>
                                    <div className="font-medium">{sale.customer_name}</div>
                                    {sale.customer_brand_name && (
                                      <div className="text-xs text-gray-500">{sale.customer_brand_name}</div>
                                    )}
                                  </div>
                                ) : (
                                  <span className="text-gray-500 italic">Walk-in Customer</span>
                                )}
                              </div>
                            </td>
                            <td>
                              <div className="text-sm">
                                {sale.customer_brand_name ? (
                                  <div className="font-medium text-blue-600">
                                    {sale.customer_brand_name}
                                  </div>
                                ) : (
                                  <span className="text-gray-400 italic">-</span>
                                )}
                              </div>
                            </td>
                            <td>
                              <div className={`px-2 py-1 rounded text-sm font-medium ${
                                sale.sale_type === 'wholesale' || sale.customer_id ? 
                                'bg-blue-100 text-blue-800' : 
                                'bg-green-100 text-green-800'
                              }`}>
                                {sale.sale_type === 'wholesale' || sale.customer_id ? '🏢 Wholesale' : '🛍️ Retail'}
                              </div>
                            </td>
                            <td>
                              <div className={`px-2 py-1 rounded text-sm ${
                                sale.status === 'completed' ? 'bg-green-100 text-green-800' :
                                sale.status === 'pending' ? 'bg-yellow-100 text-yellow-800' :
                                'bg-gray-100 text-gray-800'
                              }`}>
                                {sale.status}
                              </div>
                            </td>
                            <td>
                              <div className="font-semibold text-success">
                                ₹{parseFloat(sale.total_amount || 0).toFixed(2)}
                              </div>
                            </td>
                            <td>
                              <div className="font-semibold text-warning">
                                {sale.discount && parseFloat(sale.discount) > 0 ? (
                                  <>
                                    ₹{parseFloat(sale.discount).toFixed(2)}
                                    <div className="text-xs text-gray-500">
                                      ({((parseFloat(sale.discount) / parseFloat(sale.total_amount || 1)) * 100).toFixed(1)}%)
                                    </div>
                                  </>
                                ) : (
                                  <span className="text-gray-400">₹0.00</span>
                                )}
                              </div>
                            </td>
                            <td>
                              <div className="text-sm">
                                {sale.items && sale.items.map((item, index) => (
                                  <div key={item.id || index} className="mb-1 p-2 bg-gray-50 rounded border-l-4 border-blue-500">
                                    <div className="font-medium text-gray-800">
                                      {item.name} {item.uom} {item.brand && `(${item.brand})`} x {item.quantity}
                                    </div>
                                    <div className="text-xs text-gray-600 mt-1">
                                      ₹{parseFloat(item.price).toFixed(2)} each = ₹{(parseFloat(item.price) * parseInt(item.quantity)).toFixed(2)}
                                    </div>
                                  </div>
                                ))}
                              </div>
                            </td>
                          </tr>
                        ))
                      )}
                    </tbody>
                    {sales.length > 0 && (
                      <tfoot>
                        <tr className="bg-gray-50 border-t-2 border-gray-200">
                          <td colSpan="7" className="font-bold text-right py-3">
                            <div className="text-lg">Totals:</div>
                          </td>
                          <td className="py-3">
                            <div className="font-bold text-lg text-success">
                              ₹{sales.reduce((sum, sale) => sum + parseFloat(sale.total_amount || 0), 0).toFixed(2)}
                            </div>
                            <div className="text-xs text-gray-600">Total Sales</div>
                          </td>
                          <td className="py-3">
                            <div className="font-bold text-lg text-warning">
                              ₹{sales.reduce((sum, sale) => sum + parseFloat(sale.discount || 0), 0).toFixed(2)}
                            </div>
                            <div className="text-xs text-gray-600">Total Discounts</div>
                          </td>
                          <td className="py-3">
                            <div className="font-bold text-lg text-primary">
                              {sales.reduce((sum, sale) => sum + (sale.items ? sale.items.reduce((itemSum, item) => itemSum + parseInt(item.quantity || 0), 0) : 0), 0)}
                            </div>
                            <div className="text-xs text-gray-600">Total Items</div>
                          </td>
                        </tr>
                        <tr className="bg-gray-100">
                          <td colSpan="5" className="font-bold text-right py-2">
                            <div className="text-sm">Net Revenue:</div>
                          </td>
                          <td colSpan="3" className="py-2">
                            <div className="font-bold text-xl text-green-600">
                              ₹{(sales.reduce((sum, sale) => sum + parseFloat(sale.total_amount || 0), 0) - sales.reduce((sum, sale) => sum + parseFloat(sale.discount || 0), 0)).toFixed(2)}
                            </div>
                            <div className="text-xs text-gray-600">Total Sales - Total Discounts</div>
                          </td>
                        </tr>
                      </tfoot>
                    )}
                  </table>
                  
                  {/* Product Performance Dictionary */}
                  {sales.length > 0 && (
                    <div className="mt-6">
                      <div className="card">
                        <div className="card-header">
                          <h4 className="card-title">
                            <span className="icon">📊</span>
                            Product Performance Dictionary
                          </h4>
                          <p className="text-sm text-gray-600 mt-2">
                            Comprehensive analysis of product sales across all filtered transactions
                          </p>
                        </div>
                        <div className="card-body">
                          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                            {/* Product Statistics */}
                            <div>
                              <h5 className="font-bold text-gray-700 mb-4 flex items-center">
                                <span className="mr-2">📦</span>
                                Products Sold - Detailed Analysis
                              </h5>
                              <div className="space-y-3 max-h-96 overflow-y-auto">
                                {(() => {
                                  const productStats = {};
                                  sales.forEach(sale => {
                                    if (sale.items) {
                                      sale.items.forEach(item => {
                                        const key = `${item.name} ${item.uom} ${item.brand ? `(${item.brand})` : ''}`;
                                        if (!productStats[key]) {
                                          productStats[key] = {
                                            name: item.name,
                                            uom: item.uom,
                                            brand: item.brand,
                                            totalQuantity: 0,
                                            totalRevenue: 0,
                                            transactionCount: 0,
                                            customers: new Set()
                                          };
                                        }
                                        productStats[key].totalQuantity += parseInt(item.quantity);
                                        productStats[key].totalRevenue += parseFloat(item.price) * parseInt(item.quantity);
                                        productStats[key].transactionCount += 1;
                                        if (sale.customer_brand_name) {
                                          productStats[key].customers.add(sale.customer_brand_name);
                                        }
                                      });
                                    }
                                  });

                                  return Object.entries(productStats)
                                    .sort((a, b) => b[1].totalQuantity - a[1].totalQuantity)
                                    .map(([key, stats]) => (
                                      <div key={key} className="bg-gradient-to-r from-blue-50 to-blue-100 p-4 rounded-lg border border-blue-200 shadow-sm">
                                        <div className="flex justify-between items-start">
                                          <div className="flex-1">
                                            <div className="font-bold text-blue-900 text-lg">{key}</div>
                                            <div className="grid grid-cols-2 gap-4 mt-3">
                                              <div className="text-sm">
                                                <div className="text-blue-700">
                                                  <span className="font-semibold">Quantity Sold:</span> {stats.totalQuantity} units
                                                </div>
                                                <div className="text-blue-700">
                                                  <span className="font-semibold">Revenue:</span> ₹{stats.totalRevenue.toFixed(2)}
                                                </div>
                                              </div>
                                              <div className="text-sm">
                                                <div className="text-blue-700">
                                                  <span className="font-semibold">Transactions:</span> {stats.transactionCount}
                                                </div>
                                                <div className="text-blue-700">
                                                  <span className="font-semibold">Customer Brands:</span> {stats.customers.size}
                                                </div>
                                              </div>
                                            </div>
                                            {stats.customers.size > 0 && (
                                              <div className="mt-2">
                                                <div className="text-xs text-blue-600 font-medium">Purchased by:</div>
                                                <div className="text-xs text-blue-500 mt-1">
                                                  {Array.from(stats.customers).join(', ') || 'Retail customers'}
                                                </div>
                                              </div>
                                            )}
                                          </div>
                                        </div>
                                      </div>
                                    ));
                                })()}
                              </div>
                            </div>

                            {/* Customer Brand Performance */}
                            <div>
                              <h5 className="font-bold text-gray-700 mb-4 flex items-center">
                                <span className="mr-2">🏢</span>
                                Customer Brand Analysis
                              </h5>
                              <div className="space-y-3 max-h-96 overflow-y-auto">
                                {(() => {
                                  const brandStats = {};
                                  sales.forEach(sale => {
                                    const brand = sale.customer_brand_name || 'Retail Customers';
                                    if (!brandStats[brand]) {
                                      brandStats[brand] = {
                                        totalAmount: 0,
                                        uniqueProducts: new Set(),
                                        transactions: 0,
                                        productDetails: {}
                                      };
                                    }
                                    brandStats[brand].totalAmount += parseFloat(sale.total_amount || 0);
                                    brandStats[brand].transactions += 1;
                                    if (sale.items) {
                                      sale.items.forEach(item => {
                                        const productKey = `${item.name} ${item.uom} ${item.brand ? `(${item.brand})` : ''}`;
                                        brandStats[brand].uniqueProducts.add(productKey);
                                        if (!brandStats[brand].productDetails[productKey]) {
                                          brandStats[brand].productDetails[productKey] = 0;
                                        }
                                        brandStats[brand].productDetails[productKey] += parseInt(item.quantity);
                                      });
                                    }
                                  });

                                  return Object.entries(brandStats)
                                    .sort((a, b) => b[1].totalAmount - a[1].totalAmount)
                                    .map(([brand, stats]) => (
                                      <div key={brand} className="bg-gradient-to-r from-green-50 to-green-100 p-4 rounded-lg border border-green-200 shadow-sm">
                                        <div className="font-bold text-green-900 text-lg">{brand}</div>
                                        <div className="grid grid-cols-2 gap-4 mt-3">
                                          <div className="text-sm">
                                            <div className="text-green-700">
                                              <span className="font-semibold">Total Revenue:</span> ₹{stats.totalAmount.toFixed(2)}
                                            </div>
                                            <div className="text-green-700">
                                              <span className="font-semibold">Transactions:</span> {stats.transactions}
                                            </div>
                                          </div>
                                          <div className="text-sm">
                                            <div className="text-green-700">
                                              <span className="font-semibold">Unique Products:</span> {stats.uniqueProducts.size}
                                            </div>
                                            <div className="text-green-700">
                                              <span className="font-semibold">Avg per Transaction:</span> ₹{(stats.totalAmount / stats.transactions).toFixed(2)}
                                            </div>
                                          </div>
                                        </div>
                                        <div className="mt-3">
                                          <div className="text-xs text-green-600 font-medium">Products purchased:</div>
                                          <div className="text-xs text-green-500 mt-1 max-h-20 overflow-y-auto">
                                            {Object.entries(stats.productDetails)
                                              .sort((a, b) => b[1] - a[1])
                                              .slice(0, 5)
                                              .map(([product, qty]) => `${product} (${qty} units)`)
                                              .join(', ')}
                                            {stats.uniqueProducts.size > 5 && ` +${stats.uniqueProducts.size - 5} more...`}
                                          </div>
                                        </div>
                                      </div>
                                    ));
                                })()}
                              </div>
                            </div>
                          </div>
                          
                          {/* Summary Statistics */}
                          <div className="mt-6 pt-6 border-t border-gray-200">
                            <h5 className="font-bold text-gray-700 mb-4 flex items-center">
                              <span className="mr-2">📈</span>
                              Overall Summary
                            </h5>
                            
                            {/* Quick Stats in One Line */}
                            <div className="flex flex-wrap gap-6 justify-center items-center bg-gray-50 p-4 rounded-lg mb-6">
                              <div className="flex items-center gap-2">
                                <span className="text-sm font-medium text-purple-600">Total Unique Products:</span>
                                <span className="text-lg font-bold text-purple-900">
                                  {(() => {
                                    const uniqueProducts = new Set();
                                    sales.forEach(sale => {
                                      if (sale.items) {
                                        sale.items.forEach(item => {
                                          uniqueProducts.add(`${item.name} ${item.uom} ${item.brand ? `(${item.brand})` : ''}`);
                                        });
                                      }
                                    });
                                    return uniqueProducts.size;
                                  })()}
                                </span>
                              </div>
                              <div className="w-px h-8 bg-gray-300"></div>
                              <div className="flex items-center gap-2">
                                <span className="text-sm font-medium text-indigo-600">Total Customer Brands:</span>
                                <span className="text-lg font-bold text-indigo-900">
                                  {(() => {
                                    const uniqueBrands = new Set();
                                    sales.forEach(sale => {
                                      if (sale.customer_brand_name) {
                                        uniqueBrands.add(sale.customer_brand_name);
                                      }
                                    });
                                    return uniqueBrands.size;
                                  })()}
                                </span>
                              </div>
                              <div className="w-px h-8 bg-gray-300"></div>
                              <div className="flex items-center gap-2">
                                <span className="text-sm font-medium text-pink-600">Total Revenue:</span>
                                <span className="text-lg font-bold text-pink-900">
                                  ₹{sales.reduce((sum, sale) => sum + parseFloat(sale.total_amount || 0), 0).toFixed(2)}
                                </span>
                              </div>
                              <div className="w-px h-8 bg-gray-300"></div>
                              <div className="flex items-center gap-2">
                                <span className="text-sm font-medium text-cyan-600">Total Transactions:</span>
                                <span className="text-lg font-bold text-cyan-900">
                                  {sales.length}
                                </span>
                              </div>
                            </div>

                            {/* Detailed Product Sales Summary */}
                            <div className="bg-blue-50 p-4 rounded-lg border border-blue-200">
                              <h6 className="font-bold text-blue-900 mb-3 flex items-center">
                                <span className="mr-2">🛍️</span>
                                All Products Sold (Detailed Summary)
                              </h6>
                              <div className="text-sm text-blue-800">
                                {(() => {
                                  const productSummary = {};
                                  let totalUnits = 0;
                                  
                                  sales.forEach(sale => {
                                    if (sale.items) {
                                      sale.items.forEach(item => {
                                        const key = `${item.name} ${item.uom}${item.brand ? ` (${item.brand})` : ''}`;
                                        if (!productSummary[key]) {
                                          productSummary[key] = 0;
                                        }
                                        const qty = parseInt(item.quantity || 0);
                                        productSummary[key] += qty;
                                        totalUnits += qty;
                                      });
                                    }
                                  });
                                  
                                  const sortedProducts = Object.entries(productSummary)
                                    .sort((a, b) => b[1] - a[1])
                                    .map(([product, units]) => `${product} (${units} units)`)
                                    .join(', ');
                                  
                                  return (
                                    <div>
                                      <div className="font-semibold mb-2">
                                        Total Units Sold: {totalUnits} | Products: {Object.keys(productSummary).length}
                                      </div>
                                      <div className="leading-relaxed">
                                        {sortedProducts || 'No products sold yet'}
                                      </div>
                                    </div>
                                  );
                                })()}
                              </div>
                            </div>

                            {/* Shop Performance Metrics */}
                            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mt-4">
                              <div className="bg-green-50 p-4 rounded-lg border border-green-200">
                                <h6 className="font-bold text-green-900 mb-2 flex items-center">
                                  <span className="mr-2">💰</span>
                                  Revenue Analysis
                                </h6>
                                <div className="text-sm text-green-800 space-y-1">
                                  <div>Total Revenue: ₹{sales.reduce((sum, sale) => sum + parseFloat(sale.total_amount || 0), 0).toFixed(2)}</div>
                                  <div>Avg per Transaction: ₹{sales.length > 0 ? (sales.reduce((sum, sale) => sum + parseFloat(sale.total_amount || 0), 0) / sales.length).toFixed(2) : '0.00'}</div>
                                  <div>Highest Sale: ₹{sales.length > 0 ? Math.max(...sales.map(s => parseFloat(s.total_amount || 0))).toFixed(2) : '0.00'}</div>
                                  <div>Lowest Sale: ₹{sales.length > 0 ? Math.min(...sales.map(s => parseFloat(s.total_amount || 0))).toFixed(2) : '0.00'}</div>
                                </div>
                              </div>
                              
                              <div className="bg-orange-50 p-4 rounded-lg border border-orange-200">
                                <h6 className="font-bold text-orange-900 mb-2 flex items-center">
                                  <span className="mr-2">📦</span>
                                  Inventory Movement
                                </h6>
                                <div className="text-sm text-orange-800 space-y-1">
                                  <div>Avg Items per Sale: {sales.length > 0 ? (sales.reduce((sum, sale) => sum + (sale.items ? sale.items.reduce((itemSum, item) => itemSum + parseInt(item.quantity || 0), 0) : 0), 0) / sales.length).toFixed(1) : '0'}</div>
                                  <div>Most Sold Product: {(() => {
                                    const productCounts = {};
                                    sales.forEach(sale => {
                                      if (sale.items) {
                                        sale.items.forEach(item => {
                                          const key = `${item.name} ${item.uom}`;
                                          productCounts[key] = (productCounts[key] || 0) + parseInt(item.quantity || 0);
                                        });
                                      }
                                    });
                                    const topProduct = Object.entries(productCounts).sort((a, b) => b[1] - a[1])[0];
                                    return topProduct ? `${topProduct[0]} (${topProduct[1]} units)` : 'None';
                                  })()}</div>
                                </div>
                              </div>
                              
                              <div className="bg-purple-50 p-4 rounded-lg border border-purple-200">
                                <h6 className="font-bold text-purple-900 mb-2 flex items-center">
                                  <span className="mr-2">👥</span>
                                  Customer Analysis
                                </h6>
                                <div className="text-sm text-purple-800 space-y-1">
                                  <div>Wholesale Sales: {sales.filter(s => s.customer_brand_name).length}</div>
                                  <div>Retail Sales: {sales.filter(s => !s.customer_brand_name).length}</div>
                                  <div>Top Customer: {(() => {
                                    const customerRevenue = {};
                                    sales.forEach(sale => {
                                      const customer = sale.customer_brand_name || 'Retail';
                                      customerRevenue[customer] = (customerRevenue[customer] || 0) + parseFloat(sale.total_amount || 0);
                                    });
                                    const topCustomer = Object.entries(customerRevenue).sort((a, b) => b[1] - a[1])[0];
                                    return topCustomer ? `${topCustomer[0]} (₹${topCustomer[1].toFixed(2)})` : 'None';
                                  })()}</div>
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  )}
                </div>
              )}
            </div>
          </div>
        )}
      </div>
    </>
  );
}

export default Products;