import React, { useEffect, useState, useCallback } from 'react';
import axios from 'axios';
import SaleInvoice from './SaleInvoice';

// Edit Sale Form Component
function EditSaleForm({ sale, onSave, onCancel }) {
  const [formData, setFormData] = useState({
    status: sale.status || 'completed',
    discount: sale.discount || 0
  });

  const handleSubmit = (e) => {
    e.preventDefault();
    onSave(formData);
  };

  return (
    <form onSubmit={handleSubmit}>
      <div style={{ marginBottom: '15px' }}>
        <label style={{ display: 'block', fontWeight: 'bold', marginBottom: '5px' }}>Status:</label>
        <select 
          value={formData.status}
          onChange={(e) => setFormData({...formData, status: e.target.value})}
          style={{ 
            width: '100%', 
            padding: '8px', 
            border: '1px solid #ced4da', 
            borderRadius: '4px' 
          }}
        >
          <option value="completed">‚úÖ Completed</option>
          <option value="pending">‚è≥ Pending</option>
        </select>
      </div>

      <div style={{ marginBottom: '20px' }}>
        <label style={{ display: 'block', fontWeight: 'bold', marginBottom: '5px' }}>Sale Discount ($):</label>
        <input 
          type="number"
          step="0.01"
          value={formData.discount}
          onChange={(e) => setFormData({...formData, discount: parseFloat(e.target.value) || 0})}
          style={{ 
            width: '100%', 
            padding: '8px', 
            border: '1px solid #ced4da', 
            borderRadius: '4px' 
          }}
          placeholder="0.00"
        />
      </div>

      <div style={{ padding: '15px', backgroundColor: '#f8f9fa', borderRadius: '4px', marginBottom: '20px' }}>
        <strong>Sale Info:</strong>
        <div>Sale ID: #{sale.id}</div>
        <div>Date: {new Date(sale.date).toLocaleDateString()}</div>
        <div>Total: ${parseFloat(sale.total_amount || 0).toFixed(2)}</div>
        <div>Customer: {sale.customer_name || 'Walk-in Customer'}</div>
      </div>

      <div style={{ display: 'flex', gap: '10px', justifyContent: 'flex-end' }}>
        <button 
          type="button"
          onClick={onCancel}
          style={{
            padding: '10px 20px',
            backgroundColor: '#6c757d',
            color: 'white',
            border: 'none',
            borderRadius: '4px',
            cursor: 'pointer'
          }}
        >
          Cancel
        </button>
        <button 
          type="submit"
          style={{
            padding: '10px 20px',
            backgroundColor: '#28a745',
            color: 'white',
            border: 'none',
            borderRadius: '4px',
            cursor: 'pointer',
            fontWeight: 'bold'
          }}
        >
          üíæ Save Changes
        </button>
      </div>
    </form>
  );
}

function Sales() {
  const today = new Date().toISOString().slice(0, 10);
  
  // Helper functions for localStorage persistence
  const saveFiltersToStorage = (filters) => {
    try {
      localStorage.setItem('salesFilters', JSON.stringify(filters));
    } catch (error) {
      console.error('Error saving filters to localStorage:', error);
    }
  };

  const loadFiltersFromStorage = () => {
    try {
      const saved = localStorage.getItem('salesFilters');
      if (saved) {
        return JSON.parse(saved);
      }
    } catch (error) {
      console.error('Error loading filters from localStorage:', error);
    }
    return {
      from: today,
      to: today,
      filterCustomerName: '',
      filterProductName: '',
      filterStatus: '',
      customerType: 'retail',
      paymentMethod: 'cash'
    };
  };

  const savedFilters = loadFiltersFromStorage();
  
  const [sales, setSales] = useState([]);
  const [selected, setSelected] = useState(null);
  const [showInvoice, setShowInvoice] = useState(false);
  const [from, setFrom] = useState(savedFilters.from);
  const [to, setTo] = useState(savedFilters.to);
  const [error, setError] = useState('');
  const [message, setMessage] = useState('');
  const [products, setProducts] = useState([]);
  const [salesLoading, setSalesLoading] = useState(false);
  
  // Enhanced filtering states - with persistence
  const [filterCustomerName, setFilterCustomerName] = useState(savedFilters.filterCustomerName);
  const [filterProductName, setFilterProductName] = useState(savedFilters.filterProductName);
  const [filterStatus, setFilterStatus] = useState(savedFilters.filterStatus);
  
  // Advanced POS states
  const [quickSearch, setQuickSearch] = useState('');
  const [cart, setCart] = useState([]);
  const [customerType, setCustomerType] = useState(savedFilters.customerType);
  const [selectedCustomer, setSelectedCustomer] = useState(null);
  const [paymentMethod, setPaymentMethod] = useState(savedFilters.paymentMethod);
  const [showPOSModal, setShowPOSModal] = useState(false);
  const [searchResults, setSearchResults] = useState([]);
  const [showAnalytics, setShowAnalytics] = useState(false);
  
  // Analytics states
  const [salesAnalytics, setSalesAnalytics] = useState(null);
  const [performanceMetrics, setPerformanceMetrics] = useState(null);
  
  // New enhancement states
  const [showEditModal, setShowEditModal] = useState(false);
  const [editingSale, setEditingSale] = useState(null);
  const [rowsPerPage, setRowsPerPage] = useState(10);
  const [currentPage, setCurrentPage] = useState(1);
  
  const token = localStorage.getItem('token');
  
  // Fetch all data
  const fetchAllData = useCallback(async () => {
    setSalesLoading(true);
    try {
      const [salesRes, , productsRes] = await Promise.all([
        axios.get('http://localhost:5000/sales', { headers: { Authorization: `Bearer ${token}` } }),
        axios.get('http://localhost:5000/customers', { headers: { Authorization: `Bearer ${token}` } }),
        axios.get('http://localhost:5000/products', { headers: { Authorization: `Bearer ${token}` } })
      ]);
      
      setSales(salesRes.data || []);
      // Customers data not used in current implementation
      setProducts(productsRes.data || []);
      
      calculateSalesAnalytics(salesRes.data || []);
      calculatePerformanceMetrics(salesRes.data || []);
      
    } catch (err) {
      setError('Failed to fetch data');
    } finally {
      setSalesLoading(false);
    }
  }, [token]);
  
  const fetchSales = useCallback(async () => {
    setSalesLoading(true);
    try {
      let url = 'http://localhost:5000/sales';
      const params = [];
      if (from) params.push(`start_date=${from}`);
      if (to) params.push(`end_date=${to}`);
      if (filterProductName) params.push(`product_name=${encodeURIComponent(filterProductName)}`);
      if (filterStatus) params.push(`status=${encodeURIComponent(filterStatus)}`);
      if (params.length) url += '?' + params.join('&');
      
      const res = await axios.get(url, { headers: { Authorization: `Bearer ${token}` } });
      setSales(res.data);
      calculateSalesAnalytics(res.data);
    } catch {
      setError('Failed to fetch sales');
    } finally {
      setSalesLoading(false);
    }
  }, [from, to, filterProductName, filterStatus, token]);

  // Calculate sales analytics
  const calculateSalesAnalytics = (salesData) => {
    const totalSales = salesData.reduce((sum, sale) => sum + parseFloat(sale.total_amount || 0), 0);
    const totalTransactions = salesData.length;
    const avgSaleValue = totalTransactions > 0 ? totalSales / totalTransactions : 0;
    
    const retailSales = salesData.filter(s => !s.customer_id);
    const wholesaleSales = salesData.filter(s => s.customer_id);
    
    const completedSales = salesData.filter(s => s.status === 'completed');
    const pendingSales = salesData.filter(s => s.status === 'pending');
    
    setSalesAnalytics({
      totalSales,
      totalTransactions,
      avgSaleValue,
      retailSales: retailSales.length,
      wholesaleSales: wholesaleSales.length,
      completedSales: completedSales.length,
      pendingSales: pendingSales.length,
      retailValue: retailSales.reduce((sum, sale) => sum + parseFloat(sale.total_amount || 0), 0),
      wholesaleValue: wholesaleSales.reduce((sum, sale) => sum + parseFloat(sale.total_amount || 0), 0)
    });
  };

  // Calculate performance metrics
  const calculatePerformanceMetrics = (salesData) => {
    const today = new Date();
    const thisMonth = salesData.filter(sale => {
      const saleDate = new Date(sale.date);
      return saleDate.getMonth() === today.getMonth() && saleDate.getFullYear() === today.getFullYear();
    });
    
    const lastMonth = salesData.filter(sale => {
      const saleDate = new Date(sale.date);
      const lastMonthDate = new Date(today.getFullYear(), today.getMonth() - 1);
      return saleDate.getMonth() === lastMonthDate.getMonth() && saleDate.getFullYear() === lastMonthDate.getFullYear();
    });
    
    const thisMonthRevenue = thisMonth.reduce((sum, sale) => sum + parseFloat(sale.total_amount || 0), 0);
    const lastMonthRevenue = lastMonth.reduce((sum, sale) => sum + parseFloat(sale.total_amount || 0), 0);
    const growth = lastMonthRevenue > 0 ? ((thisMonthRevenue - lastMonthRevenue) / lastMonthRevenue) * 100 : 0;
    
    setPerformanceMetrics({
      thisMonthRevenue,
      lastMonthRevenue,
      growth,
      thisMonthTransactions: thisMonth.length,
      lastMonthTransactions: lastMonth.length,
      avgDailyRevenue: thisMonthRevenue / new Date().getDate()
    });
  };

  // Quick product search for POS
  const handleQuickSearch = async () => {
    if (!quickSearch.trim()) {
      setSearchResults([]);
      return;
    }
    
    try {
      const filtered = products.filter(product =>
        product.name.toLowerCase().includes(quickSearch.toLowerCase()) ||
        product.brand?.toLowerCase().includes(quickSearch.toLowerCase()) ||
        product.id.toString().includes(quickSearch) ||
        product.design_no?.toLowerCase().includes(quickSearch.toLowerCase())
      );
      setSearchResults(filtered.slice(0, 10));
    } catch (err) {
      setError('Error searching products');
    }
  };

  // Add to cart
  const addToCart = (product, quantity = 1) => {
    const existingItem = cart.find(item => item.id === product.id);
    
    if (existingItem) {
      setCart(cart.map(item =>
        item.id === product.id
          ? { ...item, quantity: item.quantity + quantity }
          : item
      ));
    } else {
      const price = customerType === 'retail' ? product.retail_price : product.wholesale_price;
      setCart([...cart, {
        ...product,
        quantity,
        price: parseFloat(price || 0),
        total: parseFloat(price || 0) * quantity
      }]);
    }
    
    setQuickSearch('');
    setSearchResults([]);
    setMessage(`${product.name} added to cart`);
    setTimeout(() => setMessage(''), 2000);
  };

  // Process sale
  const processSale = async () => {
    if (cart.length === 0) {
      setError('Cart is empty');
      return;
    }
    
    try {
      const saleData = {
        items: cart.map(item => ({
          product_id: item.id,
          quantity: item.quantity,
          price: item.price
        })),
        customer_id: selectedCustomer?.id || null,
        payment_method: paymentMethod,
        total_amount: cart.reduce((sum, item) => sum + item.total, 0)
      };
      
      const response = await axios.post('http://localhost:5000/sales', saleData, {
        headers: { Authorization: `Bearer ${token}` }
      });
      
      setMessage('Sale completed successfully!');
      setCart([]);
      setSelectedCustomer(null);
      setShowPOSModal(false);
      await fetchAllData();
      
      // Show invoice option
      if (response.data) {
        setSelected(response.data);
        setShowInvoice(true);
      }
      
    } catch (err) {
      setError('Failed to process sale');
    }
  };

  useEffect(() => {
    fetchAllData();
  }, [fetchAllData]);

  useEffect(() => {
    if (from || to || filterProductName || filterStatus) {
      fetchSales();
    }
  }, [fetchSales, from, to, filterProductName, filterStatus]);

  useEffect(() => {
    handleQuickSearch();
  }, [quickSearch, products]); // eslint-disable-line react-hooks/exhaustive-deps

  // Filter sales for display
  const getFilteredSales = () => {
    return sales.filter(sale => {
      const matchesCustomerName = !filterCustomerName || 
        (sale.customer_name && sale.customer_name.toLowerCase().includes(filterCustomerName.toLowerCase()));
      
      return matchesCustomerName;
    });
  };

  const filteredSales = getFilteredSales();

  // Pagination logic
  const totalPages = Math.ceil(filteredSales.length / rowsPerPage);
  const startIndex = (currentPage - 1) * rowsPerPage;
  const endIndex = startIndex + rowsPerPage;
  const paginatedSales = filteredSales.slice(startIndex, endIndex);

  // Reset to first page when filters change
  useEffect(() => {
    setCurrentPage(1);
  }, [filterCustomerName, filterProductName, filterStatus, from, to]);

  const formatCurrency = (amount) => `$${parseFloat(amount || 0).toFixed(2)}`;
  
  // Format items detail for display - show ALL items with complete details
  const formatItemsDetail = (items) => {
    if (!items || items.length === 0) return 'No items';
    
    return items.map(item => {
      const brand = item.brand ? `${item.brand} ` : '';
      const uom = item.uom || 'pcs';
      return `${brand}${item.name} (${item.quantity} ${uom})`;
    }).join(', ');
  };

  // Save filters to localStorage whenever they change
  useEffect(() => {
    const filters = {
      from,
      to,
      filterCustomerName,
      filterProductName,
      filterStatus,
      customerType,
      paymentMethod
    };
    saveFiltersToStorage(filters);
  }, [from, to, filterCustomerName, filterProductName, filterStatus, customerType, paymentMethod]);

  // Reset all filters function
  const resetAllFilters = () => {
    const defaultFilters = {
      from: today,
      to: today,
      filterCustomerName: '',
      filterProductName: '',
      filterStatus: '',
      customerType: 'retail',
      paymentMethod: 'cash'
    };
    
    setFrom(defaultFilters.from);
    setTo(defaultFilters.to);
    setFilterCustomerName(defaultFilters.filterCustomerName);
    setFilterProductName(defaultFilters.filterProductName);
    setFilterStatus(defaultFilters.filterStatus);
    setCustomerType(defaultFilters.customerType);
    setPaymentMethod(defaultFilters.paymentMethod);
    
    // Clear localStorage
    localStorage.removeItem('salesFilters');
    
    setMessage('All filters have been reset');
    setTimeout(() => setMessage(''), 3000);
  };

  // Edit sale function
  const updateSale = async (updatedSaleData) => {
    try {
      const response = await axios.put(`http://localhost:5000/sales/${editingSale.id}`, updatedSaleData, {
        headers: { Authorization: `Bearer ${token}` }
      });
      
      if (response.status === 200) {
        // Update the sales list
        setSales(sales.map(sale => 
          sale.id === editingSale.id ? { ...sale, ...updatedSaleData } : sale
        ));
        
        setShowEditModal(false);
        setEditingSale(null);
        setMessage('Sale updated successfully!');
        setTimeout(() => setMessage(''), 3000);
      }
    } catch (error) {
      setError('Failed to update sale');
      setTimeout(() => setError(''), 3000);
    }
  };

  // Check if filters are active (different from default)
  const getActiveFiltersCount = () => {
    let count = 0;
    if (from !== today) count++;
    if (to !== today) count++;
    if (filterCustomerName) count++;
    if (filterProductName) count++;
    if (filterStatus) count++;
    if (customerType !== 'retail') count++;
    if (paymentMethod !== 'cash') count++;
    return count;
  };

  const activeFiltersCount = getActiveFiltersCount();

  return (
    <div style={{ padding: '20px', fontFamily: 'Arial, sans-serif' }}>
      {/* Header */}
      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '30px' }}>
        <h2 style={{ margin: 0, color: '#333' }}>üõí Advanced Sales Management & POS</h2>
        <div style={{ display: 'flex', gap: '10px', alignItems: 'center' }}>
          <button 
            onClick={() => setShowPOSModal(true)}
            style={{ 
              padding: '8px 16px', 
              backgroundColor: '#28a745', 
              color: 'white', 
              border: 'none', 
              borderRadius: '4px',
              cursor: 'pointer',
              fontWeight: 'bold'
            }}
          >
            üõí Quick POS
          </button>
          <button 
            onClick={() => setShowAnalytics(!showAnalytics)}
            style={{ 
              padding: '8px 16px', 
              backgroundColor: showAnalytics ? '#007bff' : '#6c757d', 
              color: 'white', 
              border: 'none', 
              borderRadius: '4px',
              cursor: 'pointer'
            }}
          >
            üìä Analytics
          </button>
          <button 
            onClick={fetchAllData}
            disabled={salesLoading}
            style={{ 
              padding: '8px 16px', 
              backgroundColor: salesLoading ? '#ccc' : '#17a2b8', 
              color: 'white', 
              border: 'none', 
              borderRadius: '4px',
              cursor: salesLoading ? 'not-allowed' : 'pointer'
            }}
          >
            {salesLoading ? 'üîÑ Loading...' : 'üîÑ Refresh'}
          </button>
          <button 
            onClick={resetAllFilters}
            style={{ 
              padding: '8px 16px', 
              backgroundColor: activeFiltersCount > 0 ? '#dc3545' : '#6c757d', 
              color: 'white', 
              border: 'none', 
              borderRadius: '4px',
              cursor: 'pointer',
              fontWeight: 'bold',
              position: 'relative'
            }}
            title={`Reset all filters to default values ${activeFiltersCount > 0 ? `(${activeFiltersCount} active)` : ''}`}
          >
            üîÑ Reset Filters {activeFiltersCount > 0 && (
              <span style={{
                position: 'absolute',
                top: '-8px',
                right: '-8px',
                backgroundColor: '#ffc107',
                color: '#000',
                borderRadius: '50%',
                width: '20px',
                height: '20px',
                fontSize: '12px',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                fontWeight: 'bold'
              }}>
                {activeFiltersCount}
              </span>
            )}
          </button>
        </div>
      </div>

      {/* Messages */}
      {error && (
        <div style={{ 
          backgroundColor: '#f8d7da', 
          color: '#721c24', 
          padding: '12px', 
          borderRadius: '4px', 
          marginBottom: '20px',
          border: '1px solid #f5c6cb'
        }}>
          ‚ö†Ô∏è {error}
        </div>
      )}

      {message && (
        <div style={{ 
          backgroundColor: '#d4edda', 
          color: '#155724', 
          padding: '12px', 
          borderRadius: '4px', 
          marginBottom: '20px',
          border: '1px solid #c3e6cb'
        }}>
          ‚úÖ {message}
        </div>
      )}

      {/* Sales Dashboard */}
      {salesAnalytics && (
        <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', gap: '20px', marginBottom: '30px' }}>
          <div style={{ 
            backgroundColor: 'white', 
            padding: '20px', 
            borderRadius: '8px', 
            boxShadow: '0 2px 4px rgba(0,0,0,0.1)',
            border: '1px solid #e9ecef'
          }}>
            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '10px' }}>
              <h4 style={{ margin: 0, color: '#28a745' }}>üí∞ Total Revenue</h4>
              <span style={{ fontSize: '20px' }}>üìà</span>
            </div>
            <div style={{ fontSize: '24px', fontWeight: 'bold', color: '#28a745' }}>
              {formatCurrency(salesAnalytics.totalSales)}
            </div>
            <div style={{ fontSize: '12px', color: '#6c757d' }}>
              {salesAnalytics.totalTransactions} transactions
            </div>
          </div>

          <div style={{ 
            backgroundColor: 'white', 
            padding: '20px', 
            borderRadius: '8px', 
            boxShadow: '0 2px 4px rgba(0,0,0,0.1)',
            border: '1px solid #e9ecef'
          }}>
            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '10px' }}>
              <h4 style={{ margin: 0, color: '#007bff' }}>üìä Avg Sale Value</h4>
              <span style={{ fontSize: '20px' }}>üíé</span>
            </div>
            <div style={{ fontSize: '24px', fontWeight: 'bold', color: '#007bff' }}>
              {formatCurrency(salesAnalytics.avgSaleValue)}
            </div>
            <div style={{ fontSize: '12px', color: '#6c757d' }}>
              Per transaction
            </div>
          </div>

          <div style={{ 
            backgroundColor: 'white', 
            padding: '20px', 
            borderRadius: '8px', 
            boxShadow: '0 2px 4px rgba(0,0,0,0.1)',
            border: '1px solid #e9ecef'
          }}>
            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '10px' }}>
              <h4 style={{ margin: 0, color: '#17a2b8' }}>üè™ Retail Sales</h4>
              <span style={{ fontSize: '20px' }}>üõçÔ∏è</span>
            </div>
            <div style={{ fontSize: '24px', fontWeight: 'bold', color: '#17a2b8' }}>
              {salesAnalytics.retailSales}
            </div>
            <div style={{ fontSize: '12px', color: '#6c757d' }}>
              {formatCurrency(salesAnalytics.retailValue)}
            </div>
          </div>

          <div style={{ 
            backgroundColor: 'white', 
            padding: '20px', 
            borderRadius: '8px', 
            boxShadow: '0 2px 4px rgba(0,0,0,0.1)',
            border: '1px solid #e9ecef'
          }}>
            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '10px' }}>
              <h4 style={{ margin: 0, color: '#6f42c1' }}>üè¢ Wholesale Sales</h4>
              <span style={{ fontSize: '20px' }}>üì¶</span>
            </div>
            <div style={{ fontSize: '24px', fontWeight: 'bold', color: '#6f42c1' }}>
              {salesAnalytics.wholesaleSales}
            </div>
            <div style={{ fontSize: '12px', color: '#6c757d' }}>
              {formatCurrency(salesAnalytics.wholesaleValue)}
            </div>
          </div>
        </div>
      )}

      {/* Performance Metrics */}
      {performanceMetrics && (
        <div style={{ 
          backgroundColor: 'white', 
          padding: '20px', 
          borderRadius: '8px', 
          boxShadow: '0 2px 4px rgba(0,0,0,0.1)',
          border: '1px solid #e9ecef',
          marginBottom: '30px'
        }}>
          <h3 style={{ margin: '0 0 15px 0', color: '#333' }}>üìà Performance Metrics</h3>
          <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(150px, 1fr))', gap: '15px' }}>
            <div style={{ textAlign: 'center' }}>
              <div style={{ fontSize: '18px', fontWeight: 'bold', color: '#28a745' }}>
                {formatCurrency(performanceMetrics.thisMonthRevenue)}
              </div>
              <div style={{ fontSize: '12px', color: '#6c757d' }}>This Month</div>
            </div>
            <div style={{ textAlign: 'center' }}>
              <div style={{ fontSize: '18px', fontWeight: 'bold', color: '#dc3545' }}>
                {formatCurrency(performanceMetrics.lastMonthRevenue)}
              </div>
              <div style={{ fontSize: '12px', color: '#6c757d' }}>Last Month</div>
            </div>
            <div style={{ textAlign: 'center' }}>
              <div style={{ 
                fontSize: '18px', 
                fontWeight: 'bold', 
                color: performanceMetrics.growth >= 0 ? '#28a745' : '#dc3545' 
              }}>
                {performanceMetrics.growth >= 0 ? '+' : ''}{performanceMetrics.growth.toFixed(1)}%
              </div>
              <div style={{ fontSize: '12px', color: '#6c757d' }}>Growth</div>
            </div>
            <div style={{ textAlign: 'center' }}>
              <div style={{ fontSize: '18px', fontWeight: 'bold', color: '#007bff' }}>
                {formatCurrency(performanceMetrics.avgDailyRevenue)}
              </div>
              <div style={{ fontSize: '12px', color: '#6c757d' }}>Daily Avg</div>
            </div>
          </div>
        </div>
      )}

      {/* Enhanced Filters */}
      <div style={{ 
        backgroundColor: '#f8f9fa', 
        padding: '20px', 
        borderRadius: '8px', 
        marginBottom: '20px',
        border: '1px solid #dee2e6'
      }}>
        <h4 style={{ margin: '0 0 15px 0', color: '#495057' }}>üîç Advanced Filters</h4>
        <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', gap: '15px' }}>
          <div>
            <label style={{ display: 'block', fontWeight: 'bold', marginBottom: '5px', color: '#495057' }}>From Date:</label>
            <input 
              type="date" 
              value={from} 
              onChange={e => setFrom(e.target.value)}
              style={{ width: '100%', padding: '8px', border: '1px solid #ced4da', borderRadius: '4px' }}
            />
          </div>
          <div>
            <label style={{ display: 'block', fontWeight: 'bold', marginBottom: '5px', color: '#495057' }}>To Date:</label>
            <input 
              type="date" 
              value={to} 
              onChange={e => setTo(e.target.value)}
              style={{ width: '100%', padding: '8px', border: '1px solid #ced4da', borderRadius: '4px' }}
            />
          </div>
          <div>
            <label style={{ display: 'block', fontWeight: 'bold', marginBottom: '5px', color: '#495057' }}>Product Name:</label>
            <input 
              type="text" 
              value={filterProductName} 
              onChange={e => setFilterProductName(e.target.value)}
              placeholder="Search products..."
              style={{ width: '100%', padding: '8px', border: '1px solid #ced4da', borderRadius: '4px' }}
            />
          </div>
          <div>
            <label style={{ display: 'block', fontWeight: 'bold', marginBottom: '5px', color: '#495057' }}>Status:</label>
            <select 
              value={filterStatus} 
              onChange={e => setFilterStatus(e.target.value)}
              style={{ width: '100%', padding: '8px', border: '1px solid #ced4da', borderRadius: '4px' }}
            >
              <option value="">All Status</option>
              <option value="completed">‚úÖ Completed</option>
              <option value="pending">‚è≥ Pending</option>
            </select>
          </div>
          <div>
            <label style={{ display: 'block', fontWeight: 'bold', marginBottom: '5px', color: '#495057' }}>Customer Name:</label>
            <input 
              type="text" 
              value={filterCustomerName} 
              onChange={e => setFilterCustomerName(e.target.value)}
              placeholder="Customer name..."
              style={{ width: '100%', padding: '8px', border: '1px solid #ced4da', borderRadius: '4px' }}
            />
          </div>
          <div>
            <label style={{ display: 'block', fontWeight: 'bold', marginBottom: '5px', color: '#495057' }}>Results:</label>
            <div style={{ padding: '8px', color: '#6c757d', fontSize: '14px' }}>
              Showing {filteredSales.length} sales
            </div>
          </div>
        </div>
      </div>

      {/* Pagination and Display Controls */}
      <div style={{ 
        display: 'flex', 
        justifyContent: 'space-between', 
        alignItems: 'center', 
        marginBottom: '20px',
        backgroundColor: 'white',
        padding: '15px',
        borderRadius: '8px',
        boxShadow: '0 2px 4px rgba(0,0,0,0.1)'
      }}>
        <div style={{ display: 'flex', alignItems: 'center', gap: '10px' }}>
          <span style={{ fontWeight: 'bold', color: '#495057' }}>Show:</span>
          <select 
            value={rowsPerPage} 
            onChange={e => setRowsPerPage(Number(e.target.value))}
            style={{ 
              padding: '5px 10px', 
              border: '1px solid #ced4da', 
              borderRadius: '4px',
              backgroundColor: 'white'
            }}
          >
            <option value={5}>5 rows</option>
            <option value={10}>10 rows</option>
            <option value={25}>25 rows</option>
            <option value={50}>50 rows</option>
            <option value={100}>100 rows</option>
          </select>
          <span style={{ color: '#6c757d', fontSize: '14px' }}>
            Showing {startIndex + 1}-{Math.min(endIndex, filteredSales.length)} of {filteredSales.length} sales
          </span>
        </div>
        
        <div style={{ display: 'flex', alignItems: 'center', gap: '10px' }}>
          <button 
            onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}
            disabled={currentPage === 1}
            style={{
              padding: '5px 10px',
              backgroundColor: currentPage === 1 ? '#e9ecef' : '#007bff',
              color: currentPage === 1 ? '#6c757d' : 'white',
              border: 'none',
              borderRadius: '4px',
              cursor: currentPage === 1 ? 'not-allowed' : 'pointer'
            }}
          >
            ‚Üê Previous
          </button>
          
          <span style={{ margin: '0 10px', fontWeight: 'bold' }}>
            Page {currentPage} of {totalPages}
          </span>
          
          <button 
            onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}
            disabled={currentPage === totalPages}
            style={{
              padding: '5px 10px',
              backgroundColor: currentPage === totalPages ? '#e9ecef' : '#007bff',
              color: currentPage === totalPages ? '#6c757d' : 'white',
              border: 'none',
              borderRadius: '4px',
              cursor: currentPage === totalPages ? 'not-allowed' : 'pointer'
            }}
          >
            Next ‚Üí
          </button>
        </div>
      </div>

      {/* Sales Table */}
      <div style={{ 
        backgroundColor: 'white', 
        borderRadius: '8px', 
        boxShadow: '0 2px 4px rgba(0,0,0,0.1)',
        border: '1px solid #e9ecef',
        overflow: 'hidden'
      }}>
        <table style={{ width: '100%', borderCollapse: 'collapse' }}>
          <thead>
            <tr style={{ backgroundColor: '#f8f9fa' }}>
              <th style={{ padding: '12px', textAlign: 'left', borderBottom: '2px solid #dee2e6', color: '#495057' }}>üìÖ Date</th>
              <th style={{ padding: '12px', textAlign: 'left', borderBottom: '2px solid #dee2e6', color: '#495057' }}>üÜî ID</th>
              <th style={{ padding: '12px', textAlign: 'left', borderBottom: '2px solid #dee2e6', color: '#495057' }}>üë§ Customer</th>
              <th style={{ padding: '12px', textAlign: 'left', borderBottom: '2px solid #dee2e6', color: '#495057' }}>üõçÔ∏è Items Detail</th>
              <th style={{ padding: '12px', textAlign: 'left', borderBottom: '2px solid #dee2e6', color: '#495057' }}>üè∑Ô∏è Type</th>
              <th style={{ padding: '12px', textAlign: 'right', borderBottom: '2px solid #dee2e6', color: '#495057' }}>üí∞ Total</th>
              <th style={{ padding: '12px', textAlign: 'center', borderBottom: '2px solid #dee2e6', color: '#495057' }}>üìä Status</th>
              <th style={{ padding: '12px', textAlign: 'center', borderBottom: '2px solid #dee2e6', color: '#495057' }}>‚öôÔ∏è Actions</th>
            </tr>
          </thead>
          <tbody>
            {paginatedSales.map((sale, idx) => (
              <tr key={idx} style={{ borderBottom: '1px solid #dee2e6' }}>
                <td style={{ padding: '12px', color: '#495057' }}>
                  {new Date(sale.date).toLocaleDateString()}
                </td>
                <td style={{ padding: '12px', color: '#495057', fontWeight: 'bold' }}>
                  #{sale.id}
                </td>
                <td style={{ padding: '12px', color: '#495057' }}>
                  <div>
                    <div style={{ fontWeight: 'bold' }}>
                      {sale.customer_name || 'Walk-in Customer'}
                    </div>
                    {sale.customer_brand_name && (
                      <div style={{ fontSize: '11px', color: '#6c757d', marginTop: '2px' }}>
                        {sale.customer_brand_name}
                      </div>
                    )}
                  </div>
                </td>
                <td style={{ 
                  padding: '12px', 
                  color: '#495057', 
                  fontSize: '12px', 
                  maxWidth: '300px',
                  wordWrap: 'break-word',
                  lineHeight: '1.4'
                }}>
                  <div style={{ 
                    cursor: 'help'
                  }} title={sale.items && sale.items.length > 0 ? 
                    sale.items.map(item => `${item.brand || ''} ${item.name} - Qty: ${item.quantity} ${item.uom || 'pcs'} - Price: $${parseFloat(item.price || 0).toFixed(2)}`).join('\n') : 
                    'No items'
                  }>
                    {formatItemsDetail(sale.items)}
                  </div>
                </td>
                <td style={{ padding: '12px' }}>
                  <span style={{
                    padding: '4px 8px',
                    borderRadius: '12px',
                    fontSize: '12px',
                    fontWeight: 'bold',
                    backgroundColor: sale.customer_id ? '#e7f3ff' : '#fff3e0',
                    color: sale.customer_id ? '#0056b3' : '#e65100'
                  }}>
                    {sale.customer_id ? 'üè¢ Wholesale' : 'üõçÔ∏è Retail'}
                  </span>
                </td>
                <td style={{ 
                  padding: '12px', 
                  textAlign: 'right', 
                  fontWeight: 'bold',
                  color: '#28a745'
                }}>
                  {formatCurrency(sale.total_amount)}
                </td>
                <td style={{ padding: '12px', textAlign: 'center' }}>
                  <span style={{
                    padding: '4px 8px',
                    borderRadius: '12px',
                    fontSize: '12px',
                    fontWeight: 'bold',
                    backgroundColor: sale.status === 'completed' ? '#d4edda' : '#fff3cd',
                    color: sale.status === 'completed' ? '#155724' : '#856404'
                  }}>
                    {sale.status === 'completed' ? '‚úÖ Completed' : '‚è≥ Pending'}
                  </span>
                </td>
                <td style={{ padding: '12px', textAlign: 'center' }}>
                  <div style={{ display: 'flex', gap: '5px', justifyContent: 'center', flexWrap: 'wrap' }}>
                    <button 
                      onClick={() => { setSelected(sale); setShowInvoice(true); }}
                      style={{
                        padding: '4px 8px',
                        backgroundColor: '#007bff',
                        color: 'white',
                        border: 'none',
                        borderRadius: '4px',
                        cursor: 'pointer',
                        fontSize: '12px'
                      }}
                      title="View Invoice"
                    >
                      üìÑ Invoice
                    </button>
                    <button 
                      onClick={() => { setEditingSale(sale); setShowEditModal(true); }}
                      style={{
                        padding: '4px 8px',
                        backgroundColor: '#ffc107',
                        color: '#000',
                        border: 'none',
                        borderRadius: '4px',
                        cursor: 'pointer',
                        fontSize: '12px'
                      }}
                      title="Edit Sale"
                    >
                      ‚úèÔ∏è Edit
                    </button>
                    <button 
                      onClick={() => setSelected(sale)}
                      style={{
                        padding: '4px 8px',
                        backgroundColor: '#28a745',
                        color: 'white',
                        border: 'none',
                        borderRadius: '4px',
                        cursor: 'pointer',
                        fontSize: '12px'
                      }}
                      title="View Details"
                    >
                      üëÅÔ∏è View
                    </button>
                  </div>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
        
        {filteredSales.length === 0 && (
          <div style={{ 
            padding: '40px', 
            textAlign: 'center', 
            color: '#6c757d',
            backgroundColor: '#f8f9fa'
          }}>
            <div style={{ fontSize: '48px', marginBottom: '16px' }}>üì≠</div>
            <h3 style={{ margin: '0 0 8px 0', color: '#495057' }}>No Sales Found</h3>
            <p style={{ margin: 0 }}>No sales match your current filters. Try adjusting your search criteria.</p>
          </div>
        )}
      </div>

      {/* Quick POS Modal */}
      {showPOSModal && (
        <div style={{ 
          position: 'fixed',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          backgroundColor: 'rgba(0,0,0,0.5)',
          display: 'flex',
          justifyContent: 'center',
          alignItems: 'center',
          zIndex: 1000
        }}>
          <div style={{ 
            backgroundColor: 'white',
            padding: '30px',
            borderRadius: '12px',
            maxWidth: '800px',
            width: '90%',
            maxHeight: '90vh',
            overflow: 'auto',
            boxShadow: '0 10px 30px rgba(0,0,0,0.3)'
          }}>
            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '20px' }}>
              <h3 style={{ margin: 0, color: '#333' }}>üõí Quick POS System</h3>
              <button 
                onClick={() => setShowPOSModal(false)}
                style={{
                  padding: '8px 12px',
                  backgroundColor: '#6c757d',
                  color: 'white',
                  border: 'none',
                  borderRadius: '4px',
                  cursor: 'pointer'
                }}
              >
                ‚úï Close
              </button>
            </div>

            {/* Product Search */}
            <div style={{ marginBottom: '20px' }}>
              <label style={{ display: 'block', fontWeight: 'bold', marginBottom: '5px', color: '#495057' }}>
                üîç Search Products:
              </label>
              <input 
                type="text" 
                value={quickSearch} 
                onChange={(e) => setQuickSearch(e.target.value)}
                placeholder="Product name, ID, or barcode..."
                style={{ width: '100%', padding: '12px', border: '1px solid #ced4da', borderRadius: '4px', fontSize: '16px' }}
              />
              
              {searchResults.length > 0 && (
                <div style={{ 
                  border: '1px solid #ced4da', 
                  borderTop: 'none', 
                  maxHeight: '200px', 
                  overflow: 'auto',
                  backgroundColor: 'white'
                }}>
                  {searchResults.map(product => (
                    <div 
                      key={product.id}
                      onClick={() => addToCart(product)}
                      style={{ 
                        padding: '10px', 
                        borderBottom: '1px solid #eee', 
                        cursor: 'pointer',
                        display: 'flex',
                        justifyContent: 'space-between',
                        alignItems: 'center'
                      }}
                      onMouseEnter={(e) => e.target.style.backgroundColor = '#f8f9fa'}
                      onMouseLeave={(e) => e.target.style.backgroundColor = 'white'}
                    >
                      <div>
                        <div style={{ fontWeight: 'bold' }}>{product.name}</div>
                        <div style={{ fontSize: '12px', color: '#6c757d' }}>
                          {product.brand} ‚Ä¢ Stock: {product.stock_quantity}
                        </div>
                      </div>
                      <div style={{ textAlign: 'right' }}>
                        <div style={{ fontWeight: 'bold' }}>
                          {formatCurrency(customerType === 'retail' ? product.retail_price : product.wholesale_price)}
                        </div>
                        <div style={{ fontSize: '12px', color: '#6c757d' }}>
                          #{product.id}
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>

            {/* Cart */}
            <div style={{ marginBottom: '20px' }}>
              <h4 style={{ margin: '0 0 10px 0', color: '#333' }}>üõí Cart ({cart.length} items)</h4>
              {cart.length === 0 ? (
                <div style={{ 
                  padding: '20px', 
                  textAlign: 'center', 
                  color: '#6c757d',
                  border: '2px dashed #dee2e6',
                  borderRadius: '8px'
                }}>
                  Cart is empty. Search and add products above.
                </div>
              ) : (
                <div style={{ border: '1px solid #dee2e6', borderRadius: '8px', overflow: 'hidden' }}>
                  {cart.map((item, idx) => (
                    <div key={idx} style={{ 
                      padding: '12px', 
                      borderBottom: idx < cart.length - 1 ? '1px solid #dee2e6' : 'none',
                      display: 'flex',
                      justifyContent: 'space-between',
                      alignItems: 'center'
                    }}>
                      <div>
                        <div style={{ fontWeight: 'bold' }}>{item.name}</div>
                        <div style={{ fontSize: '12px', color: '#6c757d' }}>
                          {item.quantity} √ó {formatCurrency(item.price)}
                        </div>
                      </div>
                      <div style={{ display: 'flex', alignItems: 'center', gap: '10px' }}>
                        <span style={{ fontWeight: 'bold' }}>{formatCurrency(item.total)}</span>
                        <button 
                          onClick={() => setCart(cart.filter((_, i) => i !== idx))}
                          style={{
                            padding: '4px 8px',
                            backgroundColor: '#dc3545',
                            color: 'white',
                            border: 'none',
                            borderRadius: '4px',
                            cursor: 'pointer',
                            fontSize: '12px'
                          }}
                        >
                          üóëÔ∏è
                        </button>
                      </div>
                    </div>
                  ))}
                  
                  <div style={{ 
                    padding: '12px', 
                    backgroundColor: '#f8f9fa', 
                    fontWeight: 'bold',
                    display: 'flex',
                    justifyContent: 'space-between'
                  }}>
                    <span>Total:</span>
                    <span>{formatCurrency(cart.reduce((sum, item) => sum + item.total, 0))}</span>
                  </div>
                </div>
              )}
            </div>

            {/* Sale Options */}
            <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', gap: '15px', marginBottom: '20px' }}>
              <div>
                <label style={{ display: 'block', fontWeight: 'bold', marginBottom: '5px', color: '#495057' }}>
                  Customer Type:
                </label>
                <select 
                  value={customerType} 
                  onChange={(e) => setCustomerType(e.target.value)}
                  style={{ width: '100%', padding: '8px', border: '1px solid #ced4da', borderRadius: '4px' }}
                >
                  <option value="retail">üõçÔ∏è Retail</option>
                  <option value="wholesale">üè¢ Wholesale</option>
                </select>
              </div>

              <div>
                <label style={{ display: 'block', fontWeight: 'bold', marginBottom: '5px', color: '#495057' }}>
                  Payment Method:
                </label>
                <select 
                  value={paymentMethod} 
                  onChange={(e) => setPaymentMethod(e.target.value)}
                  style={{ width: '100%', padding: '8px', border: '1px solid #ced4da', borderRadius: '4px' }}
                >
                  <option value="cash">üíµ Cash</option>
                  <option value="card">üí≥ Card</option>
                  <option value="check">üìù Check</option>
                  <option value="bank_transfer">üè¶ Bank Transfer</option>
                </select>
              </div>
            </div>

            {/* Actions */}
            <div style={{ display: 'flex', gap: '10px', justifyContent: 'flex-end' }}>
              <button 
                onClick={() => setCart([])}
                style={{
                  padding: '10px 20px',
                  backgroundColor: '#6c757d',
                  color: 'white',
                  border: 'none',
                  borderRadius: '4px',
                  cursor: 'pointer'
                }}
              >
                üóëÔ∏è Clear Cart
              </button>
              <button 
                onClick={processSale}
                disabled={cart.length === 0}
                style={{
                  padding: '10px 20px',
                  backgroundColor: cart.length === 0 ? '#ccc' : '#28a745',
                  color: 'white',
                  border: 'none',
                  borderRadius: '4px',
                  cursor: cart.length === 0 ? 'not-allowed' : 'pointer',
                  fontWeight: 'bold'
                }}
              >
                üí∞ Complete Sale ({formatCurrency(cart.reduce((sum, item) => sum + item.total, 0))})
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Sale Details Modal */}
      {selected && !showInvoice && (
        <div style={{ 
          position: 'fixed',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          backgroundColor: 'rgba(0,0,0,0.5)',
          display: 'flex',
          justifyContent: 'center',
          alignItems: 'center',
          zIndex: 1000
        }}>
          <div style={{ 
            backgroundColor: 'white',
            padding: '30px',
            borderRadius: '12px',
            maxWidth: '600px',
            width: '90%',
            maxHeight: '90vh',
            overflow: 'auto',
            boxShadow: '0 10px 30px rgba(0,0,0,0.3)'
          }}>
            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '20px' }}>
              <h3 style={{ margin: 0, color: '#333' }}>üìä Sale Details #{selected.id}</h3>
              <button 
                onClick={() => setSelected(null)}
                style={{
                  padding: '8px 12px',
                  backgroundColor: '#6c757d',
                  color: 'white',
                  border: 'none',
                  borderRadius: '4px',
                  cursor: 'pointer'
                }}
              >
                ‚úï Close
              </button>
            </div>

            <div style={{ marginBottom: '20px' }}>
              <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(150px, 1fr))', gap: '15px' }}>
                <div>
                  <div style={{ fontSize: '14px', color: '#6c757d', marginBottom: '5px' }}>Date:</div>
                  <div style={{ fontWeight: 'bold', color: '#495057' }}>
                    {new Date(selected.date).toLocaleDateString()}
                  </div>
                </div>
                <div>
                  <div style={{ fontSize: '14px', color: '#6c757d', marginBottom: '5px' }}>Customer:</div>
                  <div style={{ fontWeight: 'bold', color: '#495057' }}>
                    {selected.customer_name || 'Walk-in Customer'}
                  </div>
                </div>
                <div>
                  <div style={{ fontSize: '14px', color: '#6c757d', marginBottom: '5px' }}>Total:</div>
                  <div style={{ fontWeight: 'bold', color: '#28a745', fontSize: '18px' }}>
                    {formatCurrency(selected.total_amount)}
                  </div>
                </div>
                <div>
                  <div style={{ fontSize: '14px', color: '#6c757d', marginBottom: '5px' }}>Status:</div>
                  <div>
                    <span style={{
                      padding: '4px 8px',
                      borderRadius: '12px',
                      fontSize: '12px',
                      fontWeight: 'bold',
                      backgroundColor: selected.status === 'completed' ? '#d4edda' : '#fff3cd',
                      color: selected.status === 'completed' ? '#155724' : '#856404'
                    }}>
                      {selected.status === 'completed' ? '‚úÖ Completed' : '‚è≥ Pending'}
                    </span>
                  </div>
                </div>
              </div>
            </div>

            {/* Items */}
            {selected.items && (
              <div>
                <h4 style={{ margin: '0 0 10px 0', color: '#333' }}>üì¶ Items</h4>
                <div style={{ border: '1px solid #dee2e6', borderRadius: '8px', overflow: 'hidden' }}>
                  {selected.items.map((item, idx) => (
                    <div key={idx} style={{ 
                      padding: '12px', 
                      borderBottom: idx < selected.items.length - 1 ? '1px solid #dee2e6' : 'none',
                      display: 'flex',
                      justifyContent: 'space-between',
                      alignItems: 'center'
                    }}>
                      <div>
                        <div style={{ fontWeight: 'bold' }}>{item.name}</div>
                        <div style={{ fontSize: '12px', color: '#6c757d' }}>
                          Qty: {item.quantity} √ó {formatCurrency(item.price)}
                        </div>
                      </div>
                      <div style={{ fontWeight: 'bold' }}>
                        {formatCurrency(item.price * item.quantity)}
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}

            <div style={{ display: 'flex', gap: '10px', justifyContent: 'flex-end', marginTop: '20px' }}>
              <button 
                onClick={() => { setShowInvoice(true); }}
                style={{
                  padding: '10px 20px',
                  backgroundColor: '#007bff',
                  color: 'white',
                  border: 'none',
                  borderRadius: '4px',
                  cursor: 'pointer',
                  fontWeight: 'bold'
                }}
              >
                üìÑ View Invoice
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Invoice Modal */}
      {showInvoice && selected && (
        <div style={{ 
          position: 'fixed',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          backgroundColor: 'rgba(0,0,0,0.7)',
          display: 'flex',
          justifyContent: 'center',
          alignItems: 'center',
          zIndex: 1000,
          padding: '20px'
        }}>
          <div style={{ 
            backgroundColor: 'white',
            borderRadius: '12px',
            maxWidth: '900px',
            width: '100%',
            maxHeight: '90vh',
            overflow: 'auto',
            boxShadow: '0 10px 30px rgba(0,0,0,0.3)',
            position: 'relative'
          }}>
            <SaleInvoice 
              sale={selected} 
              onClose={() => { setShowInvoice(false); setSelected(null); }}
            />
          </div>
        </div>
      )}

      {/* Edit Sale Modal */}
      {showEditModal && editingSale && (
        <div style={{ 
          position: 'fixed',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          backgroundColor: 'rgba(0,0,0,0.7)',
          display: 'flex',
          justifyContent: 'center',
          alignItems: 'center',
          zIndex: 1000,
          padding: '20px'
        }}>
          <div style={{ 
            backgroundColor: 'white',
            borderRadius: '12px',
            maxWidth: '600px',
            width: '100%',
            maxHeight: '90vh',
            overflow: 'auto',
            boxShadow: '0 10px 30px rgba(0,0,0,0.3)',
            padding: '25px'
          }}>
            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '20px' }}>
              <h3 style={{ margin: 0, color: '#333' }}>‚úèÔ∏è Edit Sale #{editingSale.id}</h3>
              <button 
                onClick={() => { setShowEditModal(false); setEditingSale(null); }}
                style={{
                  padding: '8px 12px',
                  backgroundColor: '#6c757d',
                  color: 'white',
                  border: 'none',
                  borderRadius: '4px',
                  cursor: 'pointer',
                  fontSize: '18px'
                }}
              >
                ‚úï
              </button>
            </div>
            
            <EditSaleForm 
              sale={editingSale}
              onSave={updateSale}
              onCancel={() => { setShowEditModal(false); setEditingSale(null); }}
            />
          </div>
        </div>
      )}
    </div>
  );
}

export default Sales;